Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ; program
Rule 3     statement -> assignment
Rule 4     statement -> structure
Rule 5     statement -> PRINT expression
Rule 6     structure -> WHILE expression { program }
Rule 7     assignment -> ID = expression
Rule 8     expression -> NUMBER
Rule 9     expression -> ID
Rule 10    expression -> ( expression )
Rule 11    expression -> expression ADD_OP expression
Rule 12    expression -> expression MUL_OP expression

Terminals, with rules where they appear

(                    : 10
)                    : 10
;                    : 2
=                    : 7
ADD_OP               : 11
ID                   : 7 9
MUL_OP               : 12
NUMBER               : 8
PRINT                : 5
WHILE                : 6
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

assignment           : 3
expression           : 5 6 7 10 11 11 12 12
program              : 2 6 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignment
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (7) assignment -> . ID = expression
    (6) structure -> . WHILE expression { program }

    PRINT           shift and go to state 5
    ID              shift and go to state 6
    WHILE           shift and go to state 2

    assignment                     shift and go to state 1
    program                        shift and go to state 3
    structure                      shift and go to state 7
    statement                      shift and go to state 4

state 1

    (3) statement -> assignment .

    ;               reduce using rule 3 (statement -> assignment .)
    $end            reduce using rule 3 (statement -> assignment .)
    }               reduce using rule 3 (statement -> assignment .)


state 2

    (6) structure -> WHILE . expression { program }
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . ( expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression

    NUMBER          shift and go to state 9
    ID              shift and go to state 11
    (               shift and go to state 10

    expression                     shift and go to state 8

state 3

    (0) S' -> program .



state 4

    (1) program -> statement .
    (2) program -> statement . ; program

    }               reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)
    ;               shift and go to state 12


state 5

    (5) statement -> PRINT . expression
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . ( expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression

    NUMBER          shift and go to state 9
    ID              shift and go to state 11
    (               shift and go to state 10

    expression                     shift and go to state 13

state 6

    (7) assignment -> ID . = expression

    =               shift and go to state 14


state 7

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 8

    (6) structure -> WHILE expression . { program }
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    {               shift and go to state 17
    ADD_OP          shift and go to state 16
    MUL_OP          shift and go to state 15


state 9

    (8) expression -> NUMBER .

    {               reduce using rule 8 (expression -> NUMBER .)
    ADD_OP          reduce using rule 8 (expression -> NUMBER .)
    MUL_OP          reduce using rule 8 (expression -> NUMBER .)
    ;               reduce using rule 8 (expression -> NUMBER .)
    $end            reduce using rule 8 (expression -> NUMBER .)
    }               reduce using rule 8 (expression -> NUMBER .)
    )               reduce using rule 8 (expression -> NUMBER .)


state 10

    (10) expression -> ( . expression )
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . ( expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression

    NUMBER          shift and go to state 9
    ID              shift and go to state 11
    (               shift and go to state 10

    expression                     shift and go to state 18

state 11

    (9) expression -> ID .

    {               reduce using rule 9 (expression -> ID .)
    ADD_OP          reduce using rule 9 (expression -> ID .)
    MUL_OP          reduce using rule 9 (expression -> ID .)
    ;               reduce using rule 9 (expression -> ID .)
    $end            reduce using rule 9 (expression -> ID .)
    }               reduce using rule 9 (expression -> ID .)
    )               reduce using rule 9 (expression -> ID .)


state 12

    (2) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignment
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (7) assignment -> . ID = expression
    (6) structure -> . WHILE expression { program }

    PRINT           shift and go to state 5
    ID              shift and go to state 6
    WHILE           shift and go to state 2

    assignment                     shift and go to state 1
    program                        shift and go to state 19
    structure                      shift and go to state 7
    statement                      shift and go to state 4

state 13

    (5) statement -> PRINT expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ;               reduce using rule 5 (statement -> PRINT expression .)
    $end            reduce using rule 5 (statement -> PRINT expression .)
    }               reduce using rule 5 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 16
    MUL_OP          shift and go to state 15


state 14

    (7) assignment -> ID = . expression
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . ( expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression

    NUMBER          shift and go to state 9
    ID              shift and go to state 11
    (               shift and go to state 10

    expression                     shift and go to state 20

state 15

    (12) expression -> expression MUL_OP . expression
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . ( expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression

    NUMBER          shift and go to state 9
    ID              shift and go to state 11
    (               shift and go to state 10

    expression                     shift and go to state 21

state 16

    (11) expression -> expression ADD_OP . expression
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . ( expression )
    (11) expression -> . expression ADD_OP expression
    (12) expression -> . expression MUL_OP expression

    NUMBER          shift and go to state 9
    ID              shift and go to state 11
    (               shift and go to state 10

    expression                     shift and go to state 22

state 17

    (6) structure -> WHILE expression { . program }
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignment
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (7) assignment -> . ID = expression
    (6) structure -> . WHILE expression { program }

    PRINT           shift and go to state 5
    ID              shift and go to state 6
    WHILE           shift and go to state 2

    assignment                     shift and go to state 1
    program                        shift and go to state 23
    structure                      shift and go to state 7
    statement                      shift and go to state 4

state 18

    (10) expression -> ( expression . )
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    )               shift and go to state 24
    ADD_OP          shift and go to state 16
    MUL_OP          shift and go to state 15


state 19

    (2) program -> statement ; program .

    }               reduce using rule 2 (program -> statement ; program .)
    $end            reduce using rule 2 (program -> statement ; program .)


state 20

    (7) assignment -> ID = expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    ;               reduce using rule 7 (assignment -> ID = expression .)
    $end            reduce using rule 7 (assignment -> ID = expression .)
    }               reduce using rule 7 (assignment -> ID = expression .)
    ADD_OP          shift and go to state 16
    MUL_OP          shift and go to state 15


state 21

    (12) expression -> expression MUL_OP expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    {               reduce using rule 12 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 12 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 12 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 12 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 12 (expression -> expression MUL_OP expression .)
    }               reduce using rule 12 (expression -> expression MUL_OP expression .)
    )               reduce using rule 12 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 16 ]
  ! MUL_OP          [ shift and go to state 15 ]


state 22

    (11) expression -> expression ADD_OP expression .
    (11) expression -> expression . ADD_OP expression
    (12) expression -> expression . MUL_OP expression

    {               reduce using rule 11 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 11 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 11 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 11 (expression -> expression ADD_OP expression .)
    }               reduce using rule 11 (expression -> expression ADD_OP expression .)
    )               reduce using rule 11 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 15

  ! MUL_OP          [ reduce using rule 11 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 16 ]


state 23

    (6) structure -> WHILE expression { program . }

    }               shift and go to state 25


state 24

    (10) expression -> ( expression ) .

    {               reduce using rule 10 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 10 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 10 (expression -> ( expression ) .)
    ;               reduce using rule 10 (expression -> ( expression ) .)
    $end            reduce using rule 10 (expression -> ( expression ) .)
    }               reduce using rule 10 (expression -> ( expression ) .)
    )               reduce using rule 10 (expression -> ( expression ) .)


state 25

    (6) structure -> WHILE expression { program } .

    ;               reduce using rule 6 (structure -> WHILE expression { program } .)
    }               reduce using rule 6 (structure -> WHILE expression { program } .)
    $end            reduce using rule 6 (structure -> WHILE expression { program } .)

