
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '4\'\xa2l\xbe\xec9"}\xee\x9a\x80\xc1O\xc4K'
    
_lr_action_items = {'DO':([20,21,32,33,34,42,44,49,50,55,57,62,63,64,67,73,103,104,105,106,107,110,133,136,139,145,147,152,153,155,156,157,],[33,-39,-56,33,-57,-58,-55,-65,-67,-63,-59,-60,33,33,-40,-74,-64,33,-66,-61,-68,-75,-62,33,33,-72,-69,33,33,-73,-71,-70,]),'FLOAT':([0,1,2,7,8,9,14,17,18,20,21,55,62,63,67,70,103,106,133,],[6,-76,-78,6,-79,6,-77,-80,6,6,-39,-63,-60,6,-40,6,-64,-61,-62,]),'RETURN':([20,21,32,33,34,42,44,49,50,55,57,62,63,64,67,73,103,104,105,106,107,110,133,136,139,145,147,152,153,155,156,157,],[35,-39,-56,35,-57,-58,-55,-65,-67,-63,-59,-60,35,35,-40,-74,-64,35,-66,-61,-68,-75,-62,35,35,-72,-69,35,35,-73,-71,-70,]),'DEC_OP':([20,21,32,33,34,35,37,40,42,44,45,47,49,50,51,55,57,59,62,63,64,67,73,75,76,77,78,79,83,84,85,86,87,88,89,90,91,93,95,96,97,98,100,103,104,105,106,107,110,125,133,134,136,138,139,142,145,147,152,153,155,156,157,],[37,-39,-56,37,-57,37,37,37,-58,-55,37,-19,-65,-67,37,-63,-59,101,-60,37,37,-40,-74,-38,-36,37,-35,-37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-64,37,-66,-61,-68,-75,37,-62,37,37,37,37,37,-72,-69,37,37,-73,-71,-70,]),'VOID':([0,1,2,7,8,9,14,17,18,20,21,55,62,63,67,70,103,106,133,],[4,-76,-78,4,-79,4,-77,-80,4,4,-39,-63,-60,4,-40,4,-64,-61,-62,]),'REDUCE':([20,21,32,33,34,35,37,40,42,44,45,47,49,50,51,55,57,62,63,64,67,73,75,76,77,78,79,81,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,103,104,105,106,107,110,125,133,134,135,136,138,139,140,142,145,147,152,153,155,156,157,],[38,-39,-56,38,-57,38,38,38,-58,-55,38,-19,-65,-67,38,-63,-59,-60,38,38,-40,-74,-38,-36,38,-35,-37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-64,38,-66,-61,-68,-75,38,-62,38,38,38,38,38,38,38,-72,-69,38,38,-73,-71,-70,]),'WHILE':([20,21,32,33,34,42,44,49,50,55,57,62,63,64,67,72,73,103,104,105,106,107,110,133,136,139,145,147,152,153,155,156,157,],[41,-39,-56,41,-57,-58,-55,-65,-67,-63,-59,-60,41,41,-40,109,-74,-64,41,-66,-61,-68,-75,-62,41,41,-72,-69,41,41,-73,-71,-70,]),'EQ_OP':([36,43,48,53,54,59,60,61,80,82,94,101,102,111,117,118,123,126,127,130,137,141,151,154,],[-20,89,-15,-23,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,-24,-25,-4,-21,-22,-7,-12,-8,-6,-5,]),'EXTERN':([0,1,2,7,8,14,17,20,21,55,62,63,67,103,106,133,],[9,-76,-78,9,-79,-77,-80,9,-39,-63,-60,9,-40,-64,-61,-62,]),'LE_OP':([36,43,48,53,54,59,60,61,80,82,94,101,102,111,117,118,123,126,127,130,137,141,151,154,],[-20,85,-15,-23,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,-24,-25,-4,-21,-22,-7,-12,-8,-6,-5,]),')':([12,16,18,25,27,28,29,30,36,39,43,48,53,54,59,60,61,68,69,71,80,82,92,94,100,101,102,108,111,112,114,115,116,117,118,119,120,121,122,123,126,127,128,130,131,132,137,141,143,144,146,148,149,151,154,],[-46,25,28,-47,69,-51,-52,-49,-20,-34,-26,-15,-23,-11,-1,-2,-3,-54,-50,-48,-17,-16,123,-18,130,-10,-9,-53,-20,-33,136,-32,-29,-24,-25,-30,-31,-27,-28,-4,-21,-22,139,-7,141,-13,-12,-8,150,151,152,154,-14,-6,-5,]),'(':([3,4,5,6,10,11,12,15,16,20,21,22,23,25,26,28,30,32,33,34,35,37,38,40,41,42,44,45,46,47,49,50,51,52,55,56,57,58,59,62,63,64,66,67,68,69,71,73,75,76,77,78,79,81,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,103,104,105,106,107,109,110,125,133,134,135,136,138,139,140,142,145,147,152,153,155,156,157,],[-44,-43,10,-45,10,18,-46,10,18,45,-39,10,18,-47,10,-51,-49,-56,45,-57,45,45,81,45,83,-58,-55,45,10,-19,-65,-67,45,95,-63,98,-59,99,100,-60,45,45,18,-40,18,-50,-48,-74,-38,-36,45,-35,-37,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-64,45,-66,-61,-68,134,-75,45,-62,45,45,45,45,45,45,45,-72,-69,45,45,-73,-71,-70,]),'+':([36,43,48,53,54,59,60,61,80,82,94,101,102,111,115,116,117,118,119,120,121,122,123,126,127,130,137,141,151,154,],[-20,86,-15,-23,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,86,86,-24,-25,86,86,86,86,-4,-21,-22,-7,-12,-8,-6,-5,]),'*':([36,48,53,54,59,60,61,80,82,94,101,102,111,117,118,123,126,127,130,137,141,151,154,],[-20,-15,96,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,96,96,-4,-21,-22,-7,-12,-8,-6,-5,]),'-':([20,21,32,33,34,35,36,37,40,42,43,44,45,47,48,49,50,51,53,54,55,57,59,60,61,62,63,64,67,73,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,100,101,102,103,104,105,106,107,110,111,115,116,117,118,119,120,121,122,123,125,126,127,130,133,134,136,137,138,139,141,142,145,147,151,152,153,154,155,156,157,],[47,-39,-56,47,-57,47,-20,47,47,-58,87,-55,47,-19,-15,-65,-67,47,-23,-11,-63,-59,-1,-2,-3,-60,47,47,-40,-74,-38,-36,47,-35,-37,-17,-16,47,47,47,47,47,47,47,47,47,47,-18,47,47,47,47,47,-10,-9,-64,47,-66,-61,-68,-75,-20,87,87,-24,-25,87,87,87,87,-4,47,-21,-22,-7,-62,47,47,-12,47,47,-8,47,-72,-69,-6,47,47,-5,-73,-71,-70,]),',':([11,12,13,23,24,25,27,28,29,30,36,39,43,48,53,54,59,60,61,66,68,69,71,80,82,94,101,102,108,111,112,113,115,116,117,118,119,120,121,122,123,126,127,129,130,131,132,137,141,149,151,154,],[-41,-46,22,-41,22,-47,70,-51,-52,-49,-20,-34,-26,-15,-23,-11,-1,-2,-3,-42,-54,-50,-48,-17,-16,-18,-10,-9,-53,-20,-33,135,-32,-29,-24,-25,-30,-31,-27,-28,-4,-21,-22,140,-7,142,-13,-12,-8,-14,-6,-5,]),'/':([36,48,53,54,59,60,61,80,82,94,101,102,111,117,118,123,126,127,130,137,141,151,154,],[-20,-15,97,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,97,97,-4,-21,-22,-7,-12,-8,-6,-5,]),';':([11,12,13,20,21,23,24,25,28,30,32,33,34,35,36,39,42,43,44,48,49,50,53,54,55,57,59,60,61,62,63,64,65,66,67,69,71,73,74,80,82,94,95,101,102,103,104,105,106,107,110,111,112,115,116,117,118,119,120,121,122,123,125,126,127,130,133,136,137,139,141,145,147,150,151,152,153,154,155,156,157,],[-41,-46,21,50,-39,-41,67,-47,-51,-49,-56,50,-57,73,-20,-34,-58,-26,-55,-15,-65,-67,-23,-11,-63,-59,-1,-2,-3,-60,50,50,107,-42,-40,-50,-48,-74,110,-17,-16,-18,50,-10,-9,-64,50,-66,-61,-68,-75,-20,-33,-32,-29,-24,-25,-30,-31,-27,-28,-4,50,-21,-22,-7,-62,50,-12,50,-8,-72,-69,155,-6,50,50,-5,-73,-71,-70,]),'IDENTIFIER':([3,4,5,6,10,15,20,21,22,26,32,33,34,35,37,40,42,44,45,46,47,49,50,51,55,57,62,63,64,67,73,75,76,77,78,79,81,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,103,104,105,106,107,110,125,133,134,135,136,138,139,140,142,145,147,152,153,155,156,157,],[-44,-43,12,-45,12,12,59,-39,12,12,-56,59,-57,59,59,59,-58,-55,59,12,-19,-65,-67,59,-63,-59,-60,59,59,-40,-74,-38,-36,59,-35,-37,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-64,59,-66,-61,-68,-75,59,-62,59,59,59,59,59,59,59,-72,-69,59,59,-73,-71,-70,]),'=':([36,48,54,59,60,61,80,82,94,101,102,123,130,137,141,151,154,],[78,-15,-11,-1,-2,-3,-17,-16,-18,-10,-9,-4,-7,-12,-8,-6,-5,]),'ADD_ASSIGN':([36,48,54,59,60,61,80,82,94,101,102,123,130,137,141,151,154,],[79,-15,-11,-1,-2,-3,-17,-16,-18,-10,-9,-4,-7,-12,-8,-6,-5,]),'$end':([1,2,7,8,14,17,21,62,67,106,133,],[-76,-78,0,-79,-77,-80,-39,-60,-40,-61,-62,]),'FOR':([20,21,32,33,34,42,44,49,50,55,57,62,63,64,67,73,103,104,105,106,107,110,133,136,139,145,147,152,153,155,156,157,],[52,-39,-56,52,-57,-58,-55,-65,-67,-63,-59,-60,52,52,-40,-74,-64,52,-66,-61,-68,-75,-62,52,52,-72,-69,52,52,-73,-71,-70,]),'ELSE':([32,34,42,44,50,57,62,73,106,107,110,133,145,147,155,156,157,],[-56,-57,-58,-55,-67,-59,-60,-74,-61,-68,-75,-62,-72,153,-73,-71,-70,]),'GE_OP':([36,43,48,53,54,59,60,61,80,82,94,101,102,111,117,118,123,126,127,130,137,141,151,154,],[-20,88,-15,-23,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,-24,-25,-4,-21,-22,-7,-12,-8,-6,-5,]),'[':([11,12,16,23,25,28,30,48,54,59,60,61,66,68,69,71,101,102,113,123,129,130,137,141,144,148,151,154,],[19,-46,19,19,-47,-51,-49,93,-11,-1,-2,-3,19,19,-50,-48,-10,-9,93,-4,93,-7,-12,-8,93,93,-6,-5,]),']':([19,31,36,39,43,48,53,54,59,60,61,80,82,94,101,102,111,112,115,116,117,118,119,120,121,122,123,124,126,127,130,137,141,151,154,],[30,71,-20,-34,-26,-15,-23,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,-33,-32,-29,-24,-25,-30,-31,-27,-28,-4,137,-21,-22,-7,-12,-8,-6,-5,]),'IF':([20,21,32,33,34,42,44,49,50,55,57,62,63,64,67,73,103,104,105,106,107,110,133,136,139,145,147,152,153,155,156,157,],[56,-39,-56,56,-57,-58,-55,-65,-67,-63,-59,-60,56,56,-40,-74,-64,56,-66,-61,-68,-75,-62,56,56,-72,-69,56,56,-73,-71,-70,]),'SUB_ASSIGN':([36,48,54,59,60,61,80,82,94,101,102,123,130,137,141,151,154,],[75,-15,-11,-1,-2,-3,-17,-16,-18,-10,-9,-4,-7,-12,-8,-6,-5,]),'MAP':([20,21,32,33,34,35,37,40,42,44,45,47,49,50,51,55,57,62,63,64,67,73,75,76,77,78,79,81,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,103,104,105,106,107,110,125,133,134,135,136,138,139,140,142,145,147,152,153,155,156,157,],[58,-39,-56,58,-57,58,58,58,-58,-55,58,-19,-65,-67,58,-63,-59,-60,58,58,-40,-74,-38,-36,58,-35,-37,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-64,58,-66,-61,-68,-75,58,-62,58,58,58,58,58,58,58,-72,-69,58,58,-73,-71,-70,]),'CONSTANTI':([19,20,21,32,33,34,35,37,40,42,44,45,47,49,50,51,55,57,62,63,64,67,73,75,76,77,78,79,81,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,103,104,105,106,107,110,125,133,134,135,136,138,139,140,142,145,147,152,153,155,156,157,],[31,60,-39,-56,60,-57,60,60,60,-58,-55,60,-19,-65,-67,60,-63,-59,-60,60,60,-40,-74,-38,-36,60,-35,-37,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-64,60,-66,-61,-68,-75,60,-62,60,60,60,60,60,60,60,-72,-69,60,60,-73,-71,-70,]),'INT':([0,1,2,7,8,9,14,17,18,20,21,55,62,63,67,70,103,106,133,],[3,-76,-78,3,-79,3,-77,-80,3,3,-39,-63,-60,3,-40,3,-64,-61,-62,]),'}':([20,32,34,42,44,49,50,57,62,64,73,104,105,106,107,110,133,145,147,155,156,157,],[62,-56,-57,-58,-55,-65,-67,-59,-60,106,-74,133,-66,-61,-68,-75,-62,-72,-69,-73,-71,-70,]),'CONSTANTF':([20,21,32,33,34,35,37,40,42,44,45,47,49,50,51,55,57,62,63,64,67,73,75,76,77,78,79,81,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,103,104,105,106,107,110,125,133,134,135,136,138,139,140,142,145,147,152,153,155,156,157,],[61,-39,-56,61,-57,61,61,61,-58,-55,61,-19,-65,-67,61,-63,-59,-60,61,61,-40,-74,-38,-36,61,-35,-37,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-64,61,-66,-61,-68,-75,61,-62,61,61,61,61,61,61,61,-72,-69,61,61,-73,-71,-70,]),'<':([36,43,48,53,54,59,60,61,80,82,94,101,102,111,117,118,123,126,127,130,137,141,151,154,],[-20,90,-15,-23,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,-24,-25,-4,-21,-22,-7,-12,-8,-6,-5,]),'MUL_ASSIGN':([36,48,54,59,60,61,80,82,94,101,102,123,130,137,141,151,154,],[76,-15,-11,-1,-2,-3,-17,-16,-18,-10,-9,-4,-7,-12,-8,-6,-5,]),'{':([11,12,20,21,25,28,30,32,33,34,42,44,49,50,55,57,62,63,64,67,69,71,73,103,104,105,106,107,110,133,136,139,145,147,152,153,155,156,157,],[20,-46,20,-39,-47,-51,-49,-56,20,-57,-58,-55,-65,-67,-63,-59,-60,20,20,-40,-50,-48,-74,-64,20,-66,-61,-68,-75,-62,20,20,-72,-69,20,20,-73,-71,-70,]),'>':([36,43,48,53,54,59,60,61,80,82,94,101,102,111,117,118,123,126,127,130,137,141,151,154,],[-20,91,-15,-23,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,-24,-25,-4,-21,-22,-7,-12,-8,-6,-5,]),'INC_OP':([20,21,32,33,34,35,37,40,42,44,45,47,49,50,51,55,57,59,62,63,64,67,73,75,76,77,78,79,83,84,85,86,87,88,89,90,91,93,95,96,97,98,100,103,104,105,106,107,110,125,133,134,136,138,139,142,145,147,152,153,155,156,157,],[40,-39,-56,40,-57,40,40,40,-58,-55,40,-19,-65,-67,40,-63,-59,102,-60,40,40,-40,-74,-38,-36,40,-35,-37,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-64,40,-66,-61,-68,-75,40,-62,40,40,40,40,40,-72,-69,40,40,-73,-71,-70,]),'NE_OP':([36,43,48,53,54,59,60,61,80,82,94,101,102,111,117,118,123,126,127,130,137,141,151,154,],[-20,84,-15,-23,-11,-1,-2,-3,-17,-16,-18,-10,-9,-20,-24,-25,-4,-21,-22,-7,-12,-8,-6,-5,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([20,33,63,64,95,104,125,136,139,152,153,],[32,32,32,32,125,32,138,32,32,32,32,]),'selection_statement':([20,33,63,64,104,136,139,152,153,],[34,34,34,34,34,34,34,34,34,]),'unary_expression':([20,33,35,37,40,45,51,63,64,77,83,84,85,86,87,88,89,90,91,93,95,96,97,98,100,104,125,134,136,138,139,142,152,153,],[36,36,36,80,82,36,94,36,36,111,36,111,111,111,111,111,111,111,111,36,36,126,127,36,36,36,36,36,36,36,36,36,36,36,]),'comparison_expression':([20,33,35,45,63,64,77,83,93,95,98,100,104,125,134,136,138,139,142,152,153,],[39,39,39,39,39,39,112,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'iteration_statement':([20,33,63,64,104,136,139,152,153,],[42,42,42,42,42,42,42,42,42,]),'additive_expression':([20,33,35,45,63,64,77,83,84,85,88,89,90,91,93,95,98,100,104,125,134,136,138,139,142,152,153,],[43,43,43,43,43,43,43,43,115,116,119,120,121,122,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'external_declaration':([0,7,],[1,14,]),'compound_statement':([11,20,33,63,64,104,136,139,152,153,],[17,44,44,44,44,44,44,44,44,44,]),'type_name':([0,7,9,18,20,63,70,],[5,5,15,26,46,46,26,]),'postfix_expression':([20,33,35,37,40,45,51,63,64,77,81,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,104,125,134,135,136,138,139,140,142,152,153,],[48,48,48,48,48,48,48,48,48,48,113,48,48,48,48,48,48,48,48,48,48,48,48,48,48,129,48,48,48,48,144,48,48,48,148,48,48,48,]),'program':([0,],[7,]),'statement':([20,33,63,64,104,136,139,152,153,],[49,72,49,105,105,145,147,156,157,]),'unary_operator':([20,33,35,37,40,45,51,63,64,77,83,84,85,86,87,88,89,90,91,93,95,96,97,98,100,104,125,134,136,138,139,142,152,153,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'parameter_declaration':([18,70,],[29,108,]),'multiplicative_expression':([20,33,35,45,63,64,77,83,84,85,86,87,88,89,90,91,93,95,98,100,104,125,134,136,138,139,142,152,153,],[53,53,53,53,53,53,53,53,53,53,117,118,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'argument_expression_list':([100,],[131,]),'primary_expression':([20,33,35,37,40,45,51,63,64,77,81,83,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,104,125,134,135,136,138,139,140,142,152,153,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'declaration':([0,7,20,63,],[8,8,55,103,]),'declarator_list':([5,15,46,],[13,24,13,]),'jump_statement':([20,33,63,64,104,136,139,152,153,],[57,57,57,57,57,57,57,57,57,]),'function_definition':([0,7,],[2,2,]),'parameter_list':([18,],[27,]),'declaration_list':([20,],[63,]),'assignment_operator':([36,],[77,]),'declarator':([5,10,15,22,26,46,],[11,16,23,66,68,23,]),'statement_list':([20,63,],[64,104,]),'expression':([20,33,35,45,63,64,83,93,95,98,100,104,125,134,136,138,139,142,152,153,],[65,65,74,92,65,65,114,124,65,128,132,65,65,143,65,146,65,149,65,65,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression_1','grammar.py',12),
  ('primary_expression -> CONSTANTI','primary_expression',1,'p_primary_expression_2','grammar.py',16),
  ('primary_expression -> CONSTANTF','primary_expression',1,'p_primary_expression_3','grammar.py',19),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression_4','grammar.py',22),
  ('primary_expression -> MAP ( postfix_expression , postfix_expression )','primary_expression',6,'p_primary_expression_5','grammar.py',25),
  ('primary_expression -> REDUCE ( postfix_expression , postfix_expression )','primary_expression',6,'p_primary_expression_6','grammar.py',28),
  ('primary_expression -> IDENTIFIER ( )','primary_expression',3,'p_primary_expression_7','grammar.py',31),
  ('primary_expression -> IDENTIFIER ( argument_expression_list )','primary_expression',4,'p_primary_expression_8','grammar.py',35),
  ('primary_expression -> IDENTIFIER INC_OP','primary_expression',2,'p_primary_expression_9','grammar.py',39),
  ('primary_expression -> IDENTIFIER DEC_OP','primary_expression',2,'p_primary_expression_10','grammar.py',43),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','grammar.py',48),
  ('postfix_expression -> postfix_expression [ expression ]','postfix_expression',4,'p_postfix_expression_2','grammar.py',51),
  ('argument_expression_list -> expression','argument_expression_list',1,'p_argument_expression_list_1','grammar.py',55),
  ('argument_expression_list -> argument_expression_list , expression','argument_expression_list',3,'p_argument_expression_list_2','grammar.py',58),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','grammar.py',62),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression_2','grammar.py',65),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression_3','grammar.py',68),
  ('unary_expression -> unary_operator unary_expression','unary_expression',2,'p_unary_expression_4','grammar.py',71),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator_1','grammar.py',75),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression_1','grammar.py',79),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_multiplicative_expression_2','grammar.py',82),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_multiplicative_expression_3','grammar.py',85),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression_1','grammar.py',89),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression_2','grammar.py',92),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression_3','grammar.py',95),
  ('comparison_expression -> additive_expression','comparison_expression',1,'p_comparison_expression_1','grammar.py',99),
  ('comparison_expression -> additive_expression < additive_expression','comparison_expression',3,'p_comparison_expression_2','grammar.py',102),
  ('comparison_expression -> additive_expression > additive_expression','comparison_expression',3,'p_comparison_expression_3','grammar.py',105),
  ('comparison_expression -> additive_expression LE_OP additive_expression','comparison_expression',3,'p_comparison_expression_4','grammar.py',108),
  ('comparison_expression -> additive_expression GE_OP additive_expression','comparison_expression',3,'p_comparison_expression_5','grammar.py',111),
  ('comparison_expression -> additive_expression EQ_OP additive_expression','comparison_expression',3,'p_comparison_expression_6','grammar.py',114),
  ('comparison_expression -> additive_expression NE_OP additive_expression','comparison_expression',3,'p_comparison_expression_7','grammar.py',117),
  ('expression -> unary_expression assignment_operator comparison_expression','expression',3,'p_expression_1','grammar.py',121),
  ('expression -> comparison_expression','expression',1,'p_expression_2','grammar.py',124),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator_1','grammar.py',128),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator_2','grammar.py',131),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator_3','grammar.py',134),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator_4','grammar.py',137),
  ('declaration -> type_name declarator_list ;','declaration',3,'p_declaration_1','grammar.py',141),
  ('declaration -> EXTERN type_name declarator_list ;','declaration',4,'p_declaration_2','grammar.py',144),
  ('declarator_list -> declarator','declarator_list',1,'p_declarator_list_1','grammar.py',148),
  ('declarator_list -> declarator_list , declarator','declarator_list',3,'p_declarator_list_2','grammar.py',151),
  ('type_name -> VOID','type_name',1,'p_type_name_1','grammar.py',155),
  ('type_name -> INT','type_name',1,'p_type_name_2','grammar.py',158),
  ('type_name -> FLOAT','type_name',1,'p_type_name_3','grammar.py',161),
  ('declarator -> IDENTIFIER','declarator',1,'p_declarator_1','grammar.py',165),
  ('declarator -> ( declarator )','declarator',3,'p_declarator_2','grammar.py',169),
  ('declarator -> declarator [ CONSTANTI ]','declarator',4,'p_declarator_3','grammar.py',172),
  ('declarator -> declarator [ ]','declarator',3,'p_declarator_4','grammar.py',175),
  ('declarator -> declarator ( parameter_list )','declarator',4,'p_declarator_5','grammar.py',178),
  ('declarator -> declarator ( )','declarator',3,'p_declarator_6','grammar.py',181),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1','grammar.py',185),
  ('parameter_list -> parameter_list , parameter_declaration','parameter_list',3,'p_parameter_list_2','grammar.py',188),
  ('parameter_declaration -> type_name declarator','parameter_declaration',2,'p_parameter_declaration_1','grammar.py',192),
  ('statement -> compound_statement','statement',1,'p_statement_1','grammar.py',196),
  ('statement -> expression_statement','statement',1,'p_statement_2','grammar.py',199),
  ('statement -> selection_statement','statement',1,'p_statement_3','grammar.py',202),
  ('statement -> iteration_statement','statement',1,'p_statement_4','grammar.py',205),
  ('statement -> jump_statement','statement',1,'p_statement_5','grammar.py',208),
  ('compound_statement -> { }','compound_statement',2,'p_compound_statement_1','grammar.py',212),
  ('compound_statement -> { statement_list }','compound_statement',3,'p_compound_statement_2','grammar.py',215),
  ('compound_statement -> { declaration_list statement_list }','compound_statement',4,'p_compound_statement_3','grammar.py',218),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1','grammar.py',222),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2','grammar.py',225),
  ('statement_list -> statement','statement_list',1,'p_statement_list_1','grammar.py',229),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','grammar.py',232),
  ('expression_statement -> ;','expression_statement',1,'p_expression_statement_1','grammar.py',236),
  ('expression_statement -> expression ;','expression_statement',2,'p_expression_statement_2','grammar.py',239),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement_1','grammar.py',243),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement_2','grammar.py',246),
  ('selection_statement -> FOR ( expression_statement expression_statement expression ) statement','selection_statement',7,'p_selection_statement_3','grammar.py',249),
  ('iteration_statement -> WHILE ( expression ) statement','iteration_statement',5,'p_iteration_statement_1','grammar.py',253),
  ('iteration_statement -> DO statement WHILE ( expression ) ;','iteration_statement',7,'p_iteration_statement_2','grammar.py',256),
  ('jump_statement -> RETURN ;','jump_statement',2,'p_jump_statement_1','grammar.py',260),
  ('jump_statement -> RETURN expression ;','jump_statement',3,'p_jump_statement_2','grammar.py',263),
  ('program -> external_declaration','program',1,'p_program_1','grammar.py',267),
  ('program -> program external_declaration','program',2,'p_program_2','grammar.py',270),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','grammar.py',274),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','grammar.py',277),
  ('function_definition -> type_name declarator compound_statement','function_definition',3,'p_function_definition_1','grammar.py',281),
]
