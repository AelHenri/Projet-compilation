Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     primary_expression -> IDENTIFIER
Rule 2     primary_expression -> CONSTANTI
Rule 3     primary_expression -> CONSTANTF
Rule 4     primary_expression -> ( expression )
Rule 5     primary_expression -> MAP ( postfix_expression , postfix_expression )
Rule 6     primary_expression -> REDUCE ( postfix_expression , postfix_expression )
Rule 7     primary_expression -> IDENTIFIER ( )
Rule 8     primary_expression -> IDENTIFIER ( argument_expression_list )
Rule 9     primary_expression -> IDENTIFIER INC_OP
Rule 10    primary_expression -> IDENTIFIER DEC_OP
Rule 11    postfix_expression -> primary_expression
Rule 12    postfix_expression -> postfix_expression [ expression ]
Rule 13    argument_expression_list -> expression
Rule 14    argument_expression_list -> argument_expression_list , expression
Rule 15    unary_expression -> postfix_expression
Rule 16    unary_expression -> INC_OP unary_expression
Rule 17    unary_expression -> DEC_OP unary_expression
Rule 18    unary_expression -> unary_operator unary_expression
Rule 19    unary_operator -> -
Rule 20    multiplicative_expression -> unary_expression
Rule 21    multiplicative_expression -> multiplicative_expression * unary_expression
Rule 22    multiplicative_expression -> multiplicative_expression / unary_expression
Rule 23    additive_expression -> multiplicative_expression
Rule 24    additive_expression -> additive_expression + multiplicative_expression
Rule 25    additive_expression -> additive_expression - multiplicative_expression
Rule 26    comparison_expression -> additive_expression
Rule 27    comparison_expression -> additive_expression < additive_expression
Rule 28    comparison_expression -> additive_expression > additive_expression
Rule 29    comparison_expression -> additive_expression LE_OP additive_expression
Rule 30    comparison_expression -> additive_expression GE_OP additive_expression
Rule 31    comparison_expression -> additive_expression EQ_OP additive_expression
Rule 32    comparison_expression -> additive_expression NE_OP additive_expression
Rule 33    expression -> unary_expression assignment_operator comparison_expression
Rule 34    expression -> comparison_expression
Rule 35    assignment_operator -> =
Rule 36    assignment_operator -> MUL_ASSIGN
Rule 37    assignment_operator -> ADD_ASSIGN
Rule 38    assignment_operator -> SUB_ASSIGN
Rule 39    declaration -> type_name declarator_list ;
Rule 40    declaration -> EXTERN type_name declarator_list ;
Rule 41    declarator_list -> declarator
Rule 42    declarator_list -> declarator_list , declarator
Rule 43    type_name -> VOID
Rule 44    type_name -> INT
Rule 45    type_name -> FLOAT
Rule 46    declarator -> IDENTIFIER
Rule 47    declarator -> ( declarator )
Rule 48    declarator -> declarator [ CONSTANTI ]
Rule 49    declarator -> declarator [ ]
Rule 50    declarator -> declarator ( parameter_list )
Rule 51    declarator -> declarator ( )
Rule 52    parameter_list -> parameter_declaration
Rule 53    parameter_list -> parameter_list , parameter_declaration
Rule 54    parameter_declaration -> type_name declarator
Rule 55    statement -> compound_statement
Rule 56    statement -> expression_statement
Rule 57    statement -> selection_statement
Rule 58    statement -> iteration_statement
Rule 59    statement -> jump_statement
Rule 60    compound_statement -> { }
Rule 61    compound_statement -> { statement_list }
Rule 62    compound_statement -> { declaration_list statement_list }
Rule 63    declaration_list -> declaration
Rule 64    declaration_list -> declaration_list declaration
Rule 65    statement_list -> statement
Rule 66    statement_list -> statement_list statement
Rule 67    expression_statement -> ;
Rule 68    expression_statement -> expression ;
Rule 69    selection_statement -> IF ( expression ) statement
Rule 70    selection_statement -> IF ( expression ) statement ELSE statement
Rule 71    selection_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 72    iteration_statement -> WHILE ( expression ) statement
Rule 73    iteration_statement -> DO statement WHILE ( expression ) ;
Rule 74    jump_statement -> RETURN ;
Rule 75    jump_statement -> RETURN expression ;
Rule 76    program -> external_declaration
Rule 77    program -> program external_declaration
Rule 78    external_declaration -> function_definition
Rule 79    external_declaration -> declaration
Rule 80    function_definition -> type_name declarator compound_statement

Terminals, with rules where they appear

(                    : 4 5 6 7 8 47 50 51 69 70 71 72 73
)                    : 4 5 6 7 8 47 50 51 69 70 71 72 73
*                    : 21
+                    : 24
,                    : 5 6 14 42 53
-                    : 19 25
/                    : 22
;                    : 39 40 67 68 73 74 75
<                    : 27
=                    : 35
>                    : 28
ADD_ASSIGN           : 37
CONSTANTF            : 3
CONSTANTI            : 2 48
DEC_OP               : 10 17
DO                   : 73
ELSE                 : 70
EQ_OP                : 31
EXTERN               : 40
FLOAT                : 45
FOR                  : 71
GE_OP                : 30
IDENTIFIER           : 1 7 8 9 10 46
IF                   : 69 70
INC_OP               : 9 16
INT                  : 44
LE_OP                : 29
MAP                  : 5
MUL_ASSIGN           : 36
NE_OP                : 32
REDUCE               : 6
RETURN               : 74 75
SUB_ASSIGN           : 38
VOID                 : 43
WHILE                : 72 73
[                    : 12 48 49
]                    : 12 48 49
error                : 
{                    : 60 61 62
}                    : 60 61 62

Nonterminals, with rules where they appear

additive_expression  : 24 25 26 27 27 28 28 29 29 30 30 31 31 32 32
argument_expression_list : 8 14
assignment_operator  : 33
comparison_expression : 33 34
compound_statement   : 55 80
declaration          : 63 64 79
declaration_list     : 62 64
declarator           : 41 42 47 48 49 50 51 54 80
declarator_list      : 39 40 42
expression           : 4 12 13 14 68 69 70 71 72 73 75
expression_statement : 56 71 71
external_declaration : 76 77
function_definition  : 78
iteration_statement  : 58
jump_statement       : 59
multiplicative_expression : 21 22 23 24 25
parameter_declaration : 52 53
parameter_list       : 50 53
postfix_expression   : 5 5 6 6 12 15
primary_expression   : 11
program              : 77 0
selection_statement  : 57
statement            : 65 66 69 70 70 71 72 73
statement_list       : 61 62 66
type_name            : 39 40 54 80
unary_expression     : 16 17 18 20 21 22 33
unary_operator       : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (76) program -> . external_declaration
    (77) program -> . program external_declaration
    (78) external_declaration -> . function_definition
    (79) external_declaration -> . declaration
    (80) function_definition -> . type_name declarator compound_statement
    (39) declaration -> . type_name declarator_list ;
    (40) declaration -> . EXTERN type_name declarator_list ;
    (43) type_name -> . VOID
    (44) type_name -> . INT
    (45) type_name -> . FLOAT

    EXTERN          shift and go to state 9
    VOID            shift and go to state 4
    INT             shift and go to state 3
    FLOAT           shift and go to state 6

    external_declaration           shift and go to state 1
    function_definition            shift and go to state 2
    type_name                      shift and go to state 5
    program                        shift and go to state 7
    declaration                    shift and go to state 8

state 1

    (76) program -> external_declaration .

    EXTERN          reduce using rule 76 (program -> external_declaration .)
    VOID            reduce using rule 76 (program -> external_declaration .)
    INT             reduce using rule 76 (program -> external_declaration .)
    FLOAT           reduce using rule 76 (program -> external_declaration .)
    $end            reduce using rule 76 (program -> external_declaration .)


state 2

    (78) external_declaration -> function_definition .

    EXTERN          reduce using rule 78 (external_declaration -> function_definition .)
    VOID            reduce using rule 78 (external_declaration -> function_definition .)
    INT             reduce using rule 78 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 78 (external_declaration -> function_definition .)
    $end            reduce using rule 78 (external_declaration -> function_definition .)


state 3

    (44) type_name -> INT .

    IDENTIFIER      reduce using rule 44 (type_name -> INT .)
    (               reduce using rule 44 (type_name -> INT .)


state 4

    (43) type_name -> VOID .

    IDENTIFIER      reduce using rule 43 (type_name -> VOID .)
    (               reduce using rule 43 (type_name -> VOID .)


state 5

    (80) function_definition -> type_name . declarator compound_statement
    (39) declaration -> type_name . declarator_list ;
    (46) declarator -> . IDENTIFIER
    (47) declarator -> . ( declarator )
    (48) declarator -> . declarator [ CONSTANTI ]
    (49) declarator -> . declarator [ ]
    (50) declarator -> . declarator ( parameter_list )
    (51) declarator -> . declarator ( )
    (41) declarator_list -> . declarator
    (42) declarator_list -> . declarator_list , declarator

    IDENTIFIER      shift and go to state 12
    (               shift and go to state 10

    declarator_list                shift and go to state 13
    declarator                     shift and go to state 11

state 6

    (45) type_name -> FLOAT .

    IDENTIFIER      reduce using rule 45 (type_name -> FLOAT .)
    (               reduce using rule 45 (type_name -> FLOAT .)


state 7

    (0) S' -> program .
    (77) program -> program . external_declaration
    (78) external_declaration -> . function_definition
    (79) external_declaration -> . declaration
    (80) function_definition -> . type_name declarator compound_statement
    (39) declaration -> . type_name declarator_list ;
    (40) declaration -> . EXTERN type_name declarator_list ;
    (43) type_name -> . VOID
    (44) type_name -> . INT
    (45) type_name -> . FLOAT

    EXTERN          shift and go to state 9
    VOID            shift and go to state 4
    INT             shift and go to state 3
    FLOAT           shift and go to state 6

    external_declaration           shift and go to state 14
    function_definition            shift and go to state 2
    type_name                      shift and go to state 5
    declaration                    shift and go to state 8

state 8

    (79) external_declaration -> declaration .

    EXTERN          reduce using rule 79 (external_declaration -> declaration .)
    VOID            reduce using rule 79 (external_declaration -> declaration .)
    INT             reduce using rule 79 (external_declaration -> declaration .)
    FLOAT           reduce using rule 79 (external_declaration -> declaration .)
    $end            reduce using rule 79 (external_declaration -> declaration .)


state 9

    (40) declaration -> EXTERN . type_name declarator_list ;
    (43) type_name -> . VOID
    (44) type_name -> . INT
    (45) type_name -> . FLOAT

    VOID            shift and go to state 4
    INT             shift and go to state 3
    FLOAT           shift and go to state 6

    type_name                      shift and go to state 15

state 10

    (47) declarator -> ( . declarator )
    (46) declarator -> . IDENTIFIER
    (47) declarator -> . ( declarator )
    (48) declarator -> . declarator [ CONSTANTI ]
    (49) declarator -> . declarator [ ]
    (50) declarator -> . declarator ( parameter_list )
    (51) declarator -> . declarator ( )

    IDENTIFIER      shift and go to state 12
    (               shift and go to state 10

    declarator                     shift and go to state 16

state 11

    (80) function_definition -> type_name declarator . compound_statement
    (48) declarator -> declarator . [ CONSTANTI ]
    (49) declarator -> declarator . [ ]
    (50) declarator -> declarator . ( parameter_list )
    (51) declarator -> declarator . ( )
    (41) declarator_list -> declarator .
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }

    [               shift and go to state 19
    (               shift and go to state 18
    ;               reduce using rule 41 (declarator_list -> declarator .)
    ,               reduce using rule 41 (declarator_list -> declarator .)
    {               shift and go to state 20

    compound_statement             shift and go to state 17

state 12

    (46) declarator -> IDENTIFIER .

    [               reduce using rule 46 (declarator -> IDENTIFIER .)
    (               reduce using rule 46 (declarator -> IDENTIFIER .)
    )               reduce using rule 46 (declarator -> IDENTIFIER .)
    ,               reduce using rule 46 (declarator -> IDENTIFIER .)
    ;               reduce using rule 46 (declarator -> IDENTIFIER .)
    {               reduce using rule 46 (declarator -> IDENTIFIER .)


state 13

    (39) declaration -> type_name declarator_list . ;
    (42) declarator_list -> declarator_list . , declarator

    ;               shift and go to state 21
    ,               shift and go to state 22


state 14

    (77) program -> program external_declaration .

    EXTERN          reduce using rule 77 (program -> program external_declaration .)
    VOID            reduce using rule 77 (program -> program external_declaration .)
    INT             reduce using rule 77 (program -> program external_declaration .)
    FLOAT           reduce using rule 77 (program -> program external_declaration .)
    $end            reduce using rule 77 (program -> program external_declaration .)


state 15

    (40) declaration -> EXTERN type_name . declarator_list ;
    (41) declarator_list -> . declarator
    (42) declarator_list -> . declarator_list , declarator
    (46) declarator -> . IDENTIFIER
    (47) declarator -> . ( declarator )
    (48) declarator -> . declarator [ CONSTANTI ]
    (49) declarator -> . declarator [ ]
    (50) declarator -> . declarator ( parameter_list )
    (51) declarator -> . declarator ( )

    IDENTIFIER      shift and go to state 12
    (               shift and go to state 10

    declarator                     shift and go to state 23
    declarator_list                shift and go to state 24

state 16

    (47) declarator -> ( declarator . )
    (48) declarator -> declarator . [ CONSTANTI ]
    (49) declarator -> declarator . [ ]
    (50) declarator -> declarator . ( parameter_list )
    (51) declarator -> declarator . ( )

    )               shift and go to state 25
    [               shift and go to state 19
    (               shift and go to state 18


state 17

    (80) function_definition -> type_name declarator compound_statement .

    EXTERN          reduce using rule 80 (function_definition -> type_name declarator compound_statement .)
    VOID            reduce using rule 80 (function_definition -> type_name declarator compound_statement .)
    INT             reduce using rule 80 (function_definition -> type_name declarator compound_statement .)
    FLOAT           reduce using rule 80 (function_definition -> type_name declarator compound_statement .)
    $end            reduce using rule 80 (function_definition -> type_name declarator compound_statement .)


state 18

    (50) declarator -> declarator ( . parameter_list )
    (51) declarator -> declarator ( . )
    (52) parameter_list -> . parameter_declaration
    (53) parameter_list -> . parameter_list , parameter_declaration
    (54) parameter_declaration -> . type_name declarator
    (43) type_name -> . VOID
    (44) type_name -> . INT
    (45) type_name -> . FLOAT

    )               shift and go to state 28
    VOID            shift and go to state 4
    INT             shift and go to state 3
    FLOAT           shift and go to state 6

    parameter_declaration          shift and go to state 29
    type_name                      shift and go to state 26
    parameter_list                 shift and go to state 27

state 19

    (48) declarator -> declarator [ . CONSTANTI ]
    (49) declarator -> declarator [ . ]

    CONSTANTI       shift and go to state 31
    ]               shift and go to state 30


state 20

    (60) compound_statement -> { . }
    (61) compound_statement -> { . statement_list }
    (62) compound_statement -> { . declaration_list statement_list }
    (65) statement_list -> . statement
    (66) statement_list -> . statement_list statement
    (63) declaration_list -> . declaration
    (64) declaration_list -> . declaration_list declaration
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (39) declaration -> . type_name declarator_list ;
    (40) declaration -> . EXTERN type_name declarator_list ;
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (43) type_name -> . VOID
    (44) type_name -> . INT
    (45) type_name -> . FLOAT
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    }               shift and go to state 62
    EXTERN          shift and go to state 9
    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    VOID            shift and go to state 4
    INT             shift and go to state 3
    FLOAT           shift and go to state 6
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    type_name                      shift and go to state 46
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    selection_statement            shift and go to state 34
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    declaration_list               shift and go to state 63
    additive_expression            shift and go to state 43
    statement                      shift and go to state 49
    declaration                    shift and go to state 55
    statement_list                 shift and go to state 64
    iteration_statement            shift and go to state 42
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 21

    (39) declaration -> type_name declarator_list ; .

    EXTERN          reduce using rule 39 (declaration -> type_name declarator_list ; .)
    VOID            reduce using rule 39 (declaration -> type_name declarator_list ; .)
    INT             reduce using rule 39 (declaration -> type_name declarator_list ; .)
    FLOAT           reduce using rule 39 (declaration -> type_name declarator_list ; .)
    {               reduce using rule 39 (declaration -> type_name declarator_list ; .)
    ;               reduce using rule 39 (declaration -> type_name declarator_list ; .)
    IF              reduce using rule 39 (declaration -> type_name declarator_list ; .)
    FOR             reduce using rule 39 (declaration -> type_name declarator_list ; .)
    WHILE           reduce using rule 39 (declaration -> type_name declarator_list ; .)
    DO              reduce using rule 39 (declaration -> type_name declarator_list ; .)
    RETURN          reduce using rule 39 (declaration -> type_name declarator_list ; .)
    INC_OP          reduce using rule 39 (declaration -> type_name declarator_list ; .)
    DEC_OP          reduce using rule 39 (declaration -> type_name declarator_list ; .)
    -               reduce using rule 39 (declaration -> type_name declarator_list ; .)
    IDENTIFIER      reduce using rule 39 (declaration -> type_name declarator_list ; .)
    CONSTANTI       reduce using rule 39 (declaration -> type_name declarator_list ; .)
    CONSTANTF       reduce using rule 39 (declaration -> type_name declarator_list ; .)
    (               reduce using rule 39 (declaration -> type_name declarator_list ; .)
    MAP             reduce using rule 39 (declaration -> type_name declarator_list ; .)
    REDUCE          reduce using rule 39 (declaration -> type_name declarator_list ; .)
    $end            reduce using rule 39 (declaration -> type_name declarator_list ; .)


state 22

    (42) declarator_list -> declarator_list , . declarator
    (46) declarator -> . IDENTIFIER
    (47) declarator -> . ( declarator )
    (48) declarator -> . declarator [ CONSTANTI ]
    (49) declarator -> . declarator [ ]
    (50) declarator -> . declarator ( parameter_list )
    (51) declarator -> . declarator ( )

    IDENTIFIER      shift and go to state 12
    (               shift and go to state 10

    declarator                     shift and go to state 66

state 23

    (41) declarator_list -> declarator .
    (48) declarator -> declarator . [ CONSTANTI ]
    (49) declarator -> declarator . [ ]
    (50) declarator -> declarator . ( parameter_list )
    (51) declarator -> declarator . ( )

    ;               reduce using rule 41 (declarator_list -> declarator .)
    ,               reduce using rule 41 (declarator_list -> declarator .)
    [               shift and go to state 19
    (               shift and go to state 18


state 24

    (40) declaration -> EXTERN type_name declarator_list . ;
    (42) declarator_list -> declarator_list . , declarator

    ;               shift and go to state 67
    ,               shift and go to state 22


state 25

    (47) declarator -> ( declarator ) .

    [               reduce using rule 47 (declarator -> ( declarator ) .)
    (               reduce using rule 47 (declarator -> ( declarator ) .)
    )               reduce using rule 47 (declarator -> ( declarator ) .)
    ,               reduce using rule 47 (declarator -> ( declarator ) .)
    ;               reduce using rule 47 (declarator -> ( declarator ) .)
    {               reduce using rule 47 (declarator -> ( declarator ) .)


state 26

    (54) parameter_declaration -> type_name . declarator
    (46) declarator -> . IDENTIFIER
    (47) declarator -> . ( declarator )
    (48) declarator -> . declarator [ CONSTANTI ]
    (49) declarator -> . declarator [ ]
    (50) declarator -> . declarator ( parameter_list )
    (51) declarator -> . declarator ( )

    IDENTIFIER      shift and go to state 12
    (               shift and go to state 10

    declarator                     shift and go to state 68

state 27

    (50) declarator -> declarator ( parameter_list . )
    (53) parameter_list -> parameter_list . , parameter_declaration

    )               shift and go to state 69
    ,               shift and go to state 70


state 28

    (51) declarator -> declarator ( ) .

    [               reduce using rule 51 (declarator -> declarator ( ) .)
    (               reduce using rule 51 (declarator -> declarator ( ) .)
    )               reduce using rule 51 (declarator -> declarator ( ) .)
    ,               reduce using rule 51 (declarator -> declarator ( ) .)
    ;               reduce using rule 51 (declarator -> declarator ( ) .)
    {               reduce using rule 51 (declarator -> declarator ( ) .)


state 29

    (52) parameter_list -> parameter_declaration .

    )               reduce using rule 52 (parameter_list -> parameter_declaration .)
    ,               reduce using rule 52 (parameter_list -> parameter_declaration .)


state 30

    (49) declarator -> declarator [ ] .

    [               reduce using rule 49 (declarator -> declarator [ ] .)
    (               reduce using rule 49 (declarator -> declarator [ ] .)
    )               reduce using rule 49 (declarator -> declarator [ ] .)
    ,               reduce using rule 49 (declarator -> declarator [ ] .)
    ;               reduce using rule 49 (declarator -> declarator [ ] .)
    {               reduce using rule 49 (declarator -> declarator [ ] .)


state 31

    (48) declarator -> declarator [ CONSTANTI . ]

    ]               shift and go to state 71


state 32

    (56) statement -> expression_statement .

    }               reduce using rule 56 (statement -> expression_statement .)
    {               reduce using rule 56 (statement -> expression_statement .)
    ;               reduce using rule 56 (statement -> expression_statement .)
    IF              reduce using rule 56 (statement -> expression_statement .)
    FOR             reduce using rule 56 (statement -> expression_statement .)
    WHILE           reduce using rule 56 (statement -> expression_statement .)
    DO              reduce using rule 56 (statement -> expression_statement .)
    RETURN          reduce using rule 56 (statement -> expression_statement .)
    INC_OP          reduce using rule 56 (statement -> expression_statement .)
    DEC_OP          reduce using rule 56 (statement -> expression_statement .)
    -               reduce using rule 56 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 56 (statement -> expression_statement .)
    CONSTANTI       reduce using rule 56 (statement -> expression_statement .)
    CONSTANTF       reduce using rule 56 (statement -> expression_statement .)
    (               reduce using rule 56 (statement -> expression_statement .)
    MAP             reduce using rule 56 (statement -> expression_statement .)
    REDUCE          reduce using rule 56 (statement -> expression_statement .)
    ELSE            reduce using rule 56 (statement -> expression_statement .)


state 33

    (73) iteration_statement -> DO . statement WHILE ( expression ) ;
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    selection_statement            shift and go to state 34
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    statement                      shift and go to state 72
    iteration_statement            shift and go to state 42
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 34

    (57) statement -> selection_statement .

    }               reduce using rule 57 (statement -> selection_statement .)
    {               reduce using rule 57 (statement -> selection_statement .)
    ;               reduce using rule 57 (statement -> selection_statement .)
    IF              reduce using rule 57 (statement -> selection_statement .)
    FOR             reduce using rule 57 (statement -> selection_statement .)
    WHILE           reduce using rule 57 (statement -> selection_statement .)
    DO              reduce using rule 57 (statement -> selection_statement .)
    RETURN          reduce using rule 57 (statement -> selection_statement .)
    INC_OP          reduce using rule 57 (statement -> selection_statement .)
    DEC_OP          reduce using rule 57 (statement -> selection_statement .)
    -               reduce using rule 57 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 57 (statement -> selection_statement .)
    CONSTANTI       reduce using rule 57 (statement -> selection_statement .)
    CONSTANTF       reduce using rule 57 (statement -> selection_statement .)
    (               reduce using rule 57 (statement -> selection_statement .)
    MAP             reduce using rule 57 (statement -> selection_statement .)
    REDUCE          reduce using rule 57 (statement -> selection_statement .)
    ELSE            reduce using rule 57 (statement -> selection_statement .)


state 35

    (74) jump_statement -> RETURN . ;
    (75) jump_statement -> RETURN . expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    ;               shift and go to state 73
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 74
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 36

    (33) expression -> unary_expression . assignment_operator comparison_expression
    (20) multiplicative_expression -> unary_expression .
    (35) assignment_operator -> . =
    (36) assignment_operator -> . MUL_ASSIGN
    (37) assignment_operator -> . ADD_ASSIGN
    (38) assignment_operator -> . SUB_ASSIGN

    *               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    /               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    <               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    >               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    LE_OP           reduce using rule 20 (multiplicative_expression -> unary_expression .)
    GE_OP           reduce using rule 20 (multiplicative_expression -> unary_expression .)
    EQ_OP           reduce using rule 20 (multiplicative_expression -> unary_expression .)
    NE_OP           reduce using rule 20 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    ;               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    ]               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    =               shift and go to state 78
    MUL_ASSIGN      shift and go to state 76
    ADD_ASSIGN      shift and go to state 79
    SUB_ASSIGN      shift and go to state 75

    assignment_operator            shift and go to state 77

state 37

    (17) unary_expression -> DEC_OP . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 80
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 38

    (6) primary_expression -> REDUCE . ( postfix_expression , postfix_expression )

    (               shift and go to state 81


state 39

    (34) expression -> comparison_expression .

    ;               reduce using rule 34 (expression -> comparison_expression .)
    )               reduce using rule 34 (expression -> comparison_expression .)
    ]               reduce using rule 34 (expression -> comparison_expression .)
    ,               reduce using rule 34 (expression -> comparison_expression .)


state 40

    (16) unary_expression -> INC_OP . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 82
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 41

    (72) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 83


state 42

    (58) statement -> iteration_statement .

    }               reduce using rule 58 (statement -> iteration_statement .)
    {               reduce using rule 58 (statement -> iteration_statement .)
    ;               reduce using rule 58 (statement -> iteration_statement .)
    IF              reduce using rule 58 (statement -> iteration_statement .)
    FOR             reduce using rule 58 (statement -> iteration_statement .)
    WHILE           reduce using rule 58 (statement -> iteration_statement .)
    DO              reduce using rule 58 (statement -> iteration_statement .)
    RETURN          reduce using rule 58 (statement -> iteration_statement .)
    INC_OP          reduce using rule 58 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 58 (statement -> iteration_statement .)
    -               reduce using rule 58 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 58 (statement -> iteration_statement .)
    CONSTANTI       reduce using rule 58 (statement -> iteration_statement .)
    CONSTANTF       reduce using rule 58 (statement -> iteration_statement .)
    (               reduce using rule 58 (statement -> iteration_statement .)
    MAP             reduce using rule 58 (statement -> iteration_statement .)
    REDUCE          reduce using rule 58 (statement -> iteration_statement .)
    ELSE            reduce using rule 58 (statement -> iteration_statement .)


state 43

    (26) comparison_expression -> additive_expression .
    (27) comparison_expression -> additive_expression . < additive_expression
    (28) comparison_expression -> additive_expression . > additive_expression
    (29) comparison_expression -> additive_expression . LE_OP additive_expression
    (30) comparison_expression -> additive_expression . GE_OP additive_expression
    (31) comparison_expression -> additive_expression . EQ_OP additive_expression
    (32) comparison_expression -> additive_expression . NE_OP additive_expression
    (24) additive_expression -> additive_expression . + multiplicative_expression
    (25) additive_expression -> additive_expression . - multiplicative_expression

    )               reduce using rule 26 (comparison_expression -> additive_expression .)
    ,               reduce using rule 26 (comparison_expression -> additive_expression .)
    ;               reduce using rule 26 (comparison_expression -> additive_expression .)
    ]               reduce using rule 26 (comparison_expression -> additive_expression .)
    <               shift and go to state 90
    >               shift and go to state 91
    LE_OP           shift and go to state 85
    GE_OP           shift and go to state 88
    EQ_OP           shift and go to state 89
    NE_OP           shift and go to state 84
    +               shift and go to state 86
    -               shift and go to state 87


state 44

    (55) statement -> compound_statement .

    }               reduce using rule 55 (statement -> compound_statement .)
    {               reduce using rule 55 (statement -> compound_statement .)
    ;               reduce using rule 55 (statement -> compound_statement .)
    IF              reduce using rule 55 (statement -> compound_statement .)
    FOR             reduce using rule 55 (statement -> compound_statement .)
    WHILE           reduce using rule 55 (statement -> compound_statement .)
    DO              reduce using rule 55 (statement -> compound_statement .)
    RETURN          reduce using rule 55 (statement -> compound_statement .)
    INC_OP          reduce using rule 55 (statement -> compound_statement .)
    DEC_OP          reduce using rule 55 (statement -> compound_statement .)
    -               reduce using rule 55 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 55 (statement -> compound_statement .)
    CONSTANTI       reduce using rule 55 (statement -> compound_statement .)
    CONSTANTF       reduce using rule 55 (statement -> compound_statement .)
    (               reduce using rule 55 (statement -> compound_statement .)
    MAP             reduce using rule 55 (statement -> compound_statement .)
    REDUCE          reduce using rule 55 (statement -> compound_statement .)
    ELSE            reduce using rule 55 (statement -> compound_statement .)


state 45

    (4) primary_expression -> ( . expression )
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 92
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 46

    (39) declaration -> type_name . declarator_list ;
    (41) declarator_list -> . declarator
    (42) declarator_list -> . declarator_list , declarator
    (46) declarator -> . IDENTIFIER
    (47) declarator -> . ( declarator )
    (48) declarator -> . declarator [ CONSTANTI ]
    (49) declarator -> . declarator [ ]
    (50) declarator -> . declarator ( parameter_list )
    (51) declarator -> . declarator ( )

    IDENTIFIER      shift and go to state 12
    (               shift and go to state 10

    declarator                     shift and go to state 23
    declarator_list                shift and go to state 13

state 47

    (19) unary_operator -> - .

    INC_OP          reduce using rule 19 (unary_operator -> - .)
    DEC_OP          reduce using rule 19 (unary_operator -> - .)
    -               reduce using rule 19 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 19 (unary_operator -> - .)
    CONSTANTI       reduce using rule 19 (unary_operator -> - .)
    CONSTANTF       reduce using rule 19 (unary_operator -> - .)
    (               reduce using rule 19 (unary_operator -> - .)
    MAP             reduce using rule 19 (unary_operator -> - .)
    REDUCE          reduce using rule 19 (unary_operator -> - .)


state 48

    (15) unary_expression -> postfix_expression .
    (12) postfix_expression -> postfix_expression . [ expression ]

    =               reduce using rule 15 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    *               reduce using rule 15 (unary_expression -> postfix_expression .)
    /               reduce using rule 15 (unary_expression -> postfix_expression .)
    <               reduce using rule 15 (unary_expression -> postfix_expression .)
    >               reduce using rule 15 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    +               reduce using rule 15 (unary_expression -> postfix_expression .)
    -               reduce using rule 15 (unary_expression -> postfix_expression .)
    )               reduce using rule 15 (unary_expression -> postfix_expression .)
    ;               reduce using rule 15 (unary_expression -> postfix_expression .)
    ]               reduce using rule 15 (unary_expression -> postfix_expression .)
    ,               reduce using rule 15 (unary_expression -> postfix_expression .)
    [               shift and go to state 93


state 49

    (65) statement_list -> statement .

    }               reduce using rule 65 (statement_list -> statement .)
    {               reduce using rule 65 (statement_list -> statement .)
    ;               reduce using rule 65 (statement_list -> statement .)
    IF              reduce using rule 65 (statement_list -> statement .)
    FOR             reduce using rule 65 (statement_list -> statement .)
    WHILE           reduce using rule 65 (statement_list -> statement .)
    DO              reduce using rule 65 (statement_list -> statement .)
    RETURN          reduce using rule 65 (statement_list -> statement .)
    INC_OP          reduce using rule 65 (statement_list -> statement .)
    DEC_OP          reduce using rule 65 (statement_list -> statement .)
    -               reduce using rule 65 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 65 (statement_list -> statement .)
    CONSTANTI       reduce using rule 65 (statement_list -> statement .)
    CONSTANTF       reduce using rule 65 (statement_list -> statement .)
    (               reduce using rule 65 (statement_list -> statement .)
    MAP             reduce using rule 65 (statement_list -> statement .)
    REDUCE          reduce using rule 65 (statement_list -> statement .)


state 50

    (67) expression_statement -> ; .

    }               reduce using rule 67 (expression_statement -> ; .)
    {               reduce using rule 67 (expression_statement -> ; .)
    ;               reduce using rule 67 (expression_statement -> ; .)
    IF              reduce using rule 67 (expression_statement -> ; .)
    FOR             reduce using rule 67 (expression_statement -> ; .)
    WHILE           reduce using rule 67 (expression_statement -> ; .)
    DO              reduce using rule 67 (expression_statement -> ; .)
    RETURN          reduce using rule 67 (expression_statement -> ; .)
    INC_OP          reduce using rule 67 (expression_statement -> ; .)
    DEC_OP          reduce using rule 67 (expression_statement -> ; .)
    -               reduce using rule 67 (expression_statement -> ; .)
    IDENTIFIER      reduce using rule 67 (expression_statement -> ; .)
    CONSTANTI       reduce using rule 67 (expression_statement -> ; .)
    CONSTANTF       reduce using rule 67 (expression_statement -> ; .)
    (               reduce using rule 67 (expression_statement -> ; .)
    MAP             reduce using rule 67 (expression_statement -> ; .)
    REDUCE          reduce using rule 67 (expression_statement -> ; .)
    ELSE            reduce using rule 67 (expression_statement -> ; .)


state 51

    (18) unary_expression -> unary_operator . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 94
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 52

    (71) selection_statement -> FOR . ( expression_statement expression_statement expression ) statement

    (               shift and go to state 95


state 53

    (23) additive_expression -> multiplicative_expression .
    (21) multiplicative_expression -> multiplicative_expression . * unary_expression
    (22) multiplicative_expression -> multiplicative_expression . / unary_expression

    +               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 23 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 23 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 23 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 23 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 96
    /               shift and go to state 97


state 54

    (11) postfix_expression -> primary_expression .

    ,               reduce using rule 11 (postfix_expression -> primary_expression .)
    [               reduce using rule 11 (postfix_expression -> primary_expression .)
    *               reduce using rule 11 (postfix_expression -> primary_expression .)
    /               reduce using rule 11 (postfix_expression -> primary_expression .)
    +               reduce using rule 11 (postfix_expression -> primary_expression .)
    -               reduce using rule 11 (postfix_expression -> primary_expression .)
    ;               reduce using rule 11 (postfix_expression -> primary_expression .)
    )               reduce using rule 11 (postfix_expression -> primary_expression .)
    ]               reduce using rule 11 (postfix_expression -> primary_expression .)
    =               reduce using rule 11 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> primary_expression .)
    <               reduce using rule 11 (postfix_expression -> primary_expression .)
    >               reduce using rule 11 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 11 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 11 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 11 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 11 (postfix_expression -> primary_expression .)


state 55

    (63) declaration_list -> declaration .

    EXTERN          reduce using rule 63 (declaration_list -> declaration .)
    VOID            reduce using rule 63 (declaration_list -> declaration .)
    INT             reduce using rule 63 (declaration_list -> declaration .)
    FLOAT           reduce using rule 63 (declaration_list -> declaration .)
    {               reduce using rule 63 (declaration_list -> declaration .)
    ;               reduce using rule 63 (declaration_list -> declaration .)
    IF              reduce using rule 63 (declaration_list -> declaration .)
    FOR             reduce using rule 63 (declaration_list -> declaration .)
    WHILE           reduce using rule 63 (declaration_list -> declaration .)
    DO              reduce using rule 63 (declaration_list -> declaration .)
    RETURN          reduce using rule 63 (declaration_list -> declaration .)
    INC_OP          reduce using rule 63 (declaration_list -> declaration .)
    DEC_OP          reduce using rule 63 (declaration_list -> declaration .)
    -               reduce using rule 63 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 63 (declaration_list -> declaration .)
    CONSTANTI       reduce using rule 63 (declaration_list -> declaration .)
    CONSTANTF       reduce using rule 63 (declaration_list -> declaration .)
    (               reduce using rule 63 (declaration_list -> declaration .)
    MAP             reduce using rule 63 (declaration_list -> declaration .)
    REDUCE          reduce using rule 63 (declaration_list -> declaration .)


state 56

    (69) selection_statement -> IF . ( expression ) statement
    (70) selection_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 98


state 57

    (59) statement -> jump_statement .

    }               reduce using rule 59 (statement -> jump_statement .)
    {               reduce using rule 59 (statement -> jump_statement .)
    ;               reduce using rule 59 (statement -> jump_statement .)
    IF              reduce using rule 59 (statement -> jump_statement .)
    FOR             reduce using rule 59 (statement -> jump_statement .)
    WHILE           reduce using rule 59 (statement -> jump_statement .)
    DO              reduce using rule 59 (statement -> jump_statement .)
    RETURN          reduce using rule 59 (statement -> jump_statement .)
    INC_OP          reduce using rule 59 (statement -> jump_statement .)
    DEC_OP          reduce using rule 59 (statement -> jump_statement .)
    -               reduce using rule 59 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 59 (statement -> jump_statement .)
    CONSTANTI       reduce using rule 59 (statement -> jump_statement .)
    CONSTANTF       reduce using rule 59 (statement -> jump_statement .)
    (               reduce using rule 59 (statement -> jump_statement .)
    MAP             reduce using rule 59 (statement -> jump_statement .)
    REDUCE          reduce using rule 59 (statement -> jump_statement .)
    ELSE            reduce using rule 59 (statement -> jump_statement .)


state 58

    (5) primary_expression -> MAP . ( postfix_expression , postfix_expression )

    (               shift and go to state 99


state 59

    (1) primary_expression -> IDENTIFIER .
    (7) primary_expression -> IDENTIFIER . ( )
    (8) primary_expression -> IDENTIFIER . ( argument_expression_list )
    (9) primary_expression -> IDENTIFIER . INC_OP
    (10) primary_expression -> IDENTIFIER . DEC_OP

    ,               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    [               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    )               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ]               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    (               shift and go to state 100
    INC_OP          shift and go to state 102
    DEC_OP          shift and go to state 101


state 60

    (2) primary_expression -> CONSTANTI .

    ,               reduce using rule 2 (primary_expression -> CONSTANTI .)
    [               reduce using rule 2 (primary_expression -> CONSTANTI .)
    =               reduce using rule 2 (primary_expression -> CONSTANTI .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANTI .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANTI .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANTI .)
    *               reduce using rule 2 (primary_expression -> CONSTANTI .)
    /               reduce using rule 2 (primary_expression -> CONSTANTI .)
    <               reduce using rule 2 (primary_expression -> CONSTANTI .)
    >               reduce using rule 2 (primary_expression -> CONSTANTI .)
    LE_OP           reduce using rule 2 (primary_expression -> CONSTANTI .)
    GE_OP           reduce using rule 2 (primary_expression -> CONSTANTI .)
    EQ_OP           reduce using rule 2 (primary_expression -> CONSTANTI .)
    NE_OP           reduce using rule 2 (primary_expression -> CONSTANTI .)
    +               reduce using rule 2 (primary_expression -> CONSTANTI .)
    -               reduce using rule 2 (primary_expression -> CONSTANTI .)
    )               reduce using rule 2 (primary_expression -> CONSTANTI .)
    ;               reduce using rule 2 (primary_expression -> CONSTANTI .)
    ]               reduce using rule 2 (primary_expression -> CONSTANTI .)


state 61

    (3) primary_expression -> CONSTANTF .

    ,               reduce using rule 3 (primary_expression -> CONSTANTF .)
    [               reduce using rule 3 (primary_expression -> CONSTANTF .)
    =               reduce using rule 3 (primary_expression -> CONSTANTF .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> CONSTANTF .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> CONSTANTF .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> CONSTANTF .)
    *               reduce using rule 3 (primary_expression -> CONSTANTF .)
    /               reduce using rule 3 (primary_expression -> CONSTANTF .)
    <               reduce using rule 3 (primary_expression -> CONSTANTF .)
    >               reduce using rule 3 (primary_expression -> CONSTANTF .)
    LE_OP           reduce using rule 3 (primary_expression -> CONSTANTF .)
    GE_OP           reduce using rule 3 (primary_expression -> CONSTANTF .)
    EQ_OP           reduce using rule 3 (primary_expression -> CONSTANTF .)
    NE_OP           reduce using rule 3 (primary_expression -> CONSTANTF .)
    +               reduce using rule 3 (primary_expression -> CONSTANTF .)
    -               reduce using rule 3 (primary_expression -> CONSTANTF .)
    )               reduce using rule 3 (primary_expression -> CONSTANTF .)
    ;               reduce using rule 3 (primary_expression -> CONSTANTF .)
    ]               reduce using rule 3 (primary_expression -> CONSTANTF .)


state 62

    (60) compound_statement -> { } .

    }               reduce using rule 60 (compound_statement -> { } .)
    {               reduce using rule 60 (compound_statement -> { } .)
    ;               reduce using rule 60 (compound_statement -> { } .)
    IF              reduce using rule 60 (compound_statement -> { } .)
    FOR             reduce using rule 60 (compound_statement -> { } .)
    WHILE           reduce using rule 60 (compound_statement -> { } .)
    DO              reduce using rule 60 (compound_statement -> { } .)
    RETURN          reduce using rule 60 (compound_statement -> { } .)
    INC_OP          reduce using rule 60 (compound_statement -> { } .)
    DEC_OP          reduce using rule 60 (compound_statement -> { } .)
    -               reduce using rule 60 (compound_statement -> { } .)
    IDENTIFIER      reduce using rule 60 (compound_statement -> { } .)
    CONSTANTI       reduce using rule 60 (compound_statement -> { } .)
    CONSTANTF       reduce using rule 60 (compound_statement -> { } .)
    (               reduce using rule 60 (compound_statement -> { } .)
    MAP             reduce using rule 60 (compound_statement -> { } .)
    REDUCE          reduce using rule 60 (compound_statement -> { } .)
    ELSE            reduce using rule 60 (compound_statement -> { } .)
    EXTERN          reduce using rule 60 (compound_statement -> { } .)
    VOID            reduce using rule 60 (compound_statement -> { } .)
    INT             reduce using rule 60 (compound_statement -> { } .)
    FLOAT           reduce using rule 60 (compound_statement -> { } .)
    $end            reduce using rule 60 (compound_statement -> { } .)


state 63

    (62) compound_statement -> { declaration_list . statement_list }
    (64) declaration_list -> declaration_list . declaration
    (65) statement_list -> . statement
    (66) statement_list -> . statement_list statement
    (39) declaration -> . type_name declarator_list ;
    (40) declaration -> . EXTERN type_name declarator_list ;
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (43) type_name -> . VOID
    (44) type_name -> . INT
    (45) type_name -> . FLOAT
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    EXTERN          shift and go to state 9
    VOID            shift and go to state 4
    INT             shift and go to state 3
    FLOAT           shift and go to state 6
    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    selection_statement            shift and go to state 34
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    type_name                      shift and go to state 46
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    statement                      shift and go to state 49
    declaration                    shift and go to state 103
    statement_list                 shift and go to state 104
    iteration_statement            shift and go to state 42
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 64

    (61) compound_statement -> { statement_list . }
    (66) statement_list -> statement_list . statement
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    }               shift and go to state 106
    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    selection_statement            shift and go to state 34
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    statement                      shift and go to state 105
    iteration_statement            shift and go to state 42
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 65

    (68) expression_statement -> expression . ;

    ;               shift and go to state 107


state 66

    (42) declarator_list -> declarator_list , declarator .
    (48) declarator -> declarator . [ CONSTANTI ]
    (49) declarator -> declarator . [ ]
    (50) declarator -> declarator . ( parameter_list )
    (51) declarator -> declarator . ( )

    ;               reduce using rule 42 (declarator_list -> declarator_list , declarator .)
    ,               reduce using rule 42 (declarator_list -> declarator_list , declarator .)
    [               shift and go to state 19
    (               shift and go to state 18


state 67

    (40) declaration -> EXTERN type_name declarator_list ; .

    EXTERN          reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    VOID            reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    INT             reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    FLOAT           reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    {               reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    ;               reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    IF              reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    FOR             reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    WHILE           reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    DO              reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    RETURN          reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    INC_OP          reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    DEC_OP          reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    -               reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    IDENTIFIER      reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    CONSTANTI       reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    CONSTANTF       reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    (               reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    MAP             reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    REDUCE          reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)
    $end            reduce using rule 40 (declaration -> EXTERN type_name declarator_list ; .)


state 68

    (54) parameter_declaration -> type_name declarator .
    (48) declarator -> declarator . [ CONSTANTI ]
    (49) declarator -> declarator . [ ]
    (50) declarator -> declarator . ( parameter_list )
    (51) declarator -> declarator . ( )

    )               reduce using rule 54 (parameter_declaration -> type_name declarator .)
    ,               reduce using rule 54 (parameter_declaration -> type_name declarator .)
    [               shift and go to state 19
    (               shift and go to state 18


state 69

    (50) declarator -> declarator ( parameter_list ) .

    [               reduce using rule 50 (declarator -> declarator ( parameter_list ) .)
    (               reduce using rule 50 (declarator -> declarator ( parameter_list ) .)
    )               reduce using rule 50 (declarator -> declarator ( parameter_list ) .)
    ,               reduce using rule 50 (declarator -> declarator ( parameter_list ) .)
    ;               reduce using rule 50 (declarator -> declarator ( parameter_list ) .)
    {               reduce using rule 50 (declarator -> declarator ( parameter_list ) .)


state 70

    (53) parameter_list -> parameter_list , . parameter_declaration
    (54) parameter_declaration -> . type_name declarator
    (43) type_name -> . VOID
    (44) type_name -> . INT
    (45) type_name -> . FLOAT

    VOID            shift and go to state 4
    INT             shift and go to state 3
    FLOAT           shift and go to state 6

    parameter_declaration          shift and go to state 108
    type_name                      shift and go to state 26

state 71

    (48) declarator -> declarator [ CONSTANTI ] .

    [               reduce using rule 48 (declarator -> declarator [ CONSTANTI ] .)
    (               reduce using rule 48 (declarator -> declarator [ CONSTANTI ] .)
    )               reduce using rule 48 (declarator -> declarator [ CONSTANTI ] .)
    ,               reduce using rule 48 (declarator -> declarator [ CONSTANTI ] .)
    ;               reduce using rule 48 (declarator -> declarator [ CONSTANTI ] .)
    {               reduce using rule 48 (declarator -> declarator [ CONSTANTI ] .)


state 72

    (73) iteration_statement -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 109


state 73

    (74) jump_statement -> RETURN ; .

    }               reduce using rule 74 (jump_statement -> RETURN ; .)
    {               reduce using rule 74 (jump_statement -> RETURN ; .)
    ;               reduce using rule 74 (jump_statement -> RETURN ; .)
    IF              reduce using rule 74 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 74 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 74 (jump_statement -> RETURN ; .)
    DO              reduce using rule 74 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 74 (jump_statement -> RETURN ; .)
    INC_OP          reduce using rule 74 (jump_statement -> RETURN ; .)
    DEC_OP          reduce using rule 74 (jump_statement -> RETURN ; .)
    -               reduce using rule 74 (jump_statement -> RETURN ; .)
    IDENTIFIER      reduce using rule 74 (jump_statement -> RETURN ; .)
    CONSTANTI       reduce using rule 74 (jump_statement -> RETURN ; .)
    CONSTANTF       reduce using rule 74 (jump_statement -> RETURN ; .)
    (               reduce using rule 74 (jump_statement -> RETURN ; .)
    MAP             reduce using rule 74 (jump_statement -> RETURN ; .)
    REDUCE          reduce using rule 74 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 74 (jump_statement -> RETURN ; .)


state 74

    (75) jump_statement -> RETURN expression . ;

    ;               shift and go to state 110


state 75

    (38) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)
    -               reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)
    CONSTANTI       reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)
    CONSTANTF       reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)
    MAP             reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)
    REDUCE          reduce using rule 38 (assignment_operator -> SUB_ASSIGN .)


state 76

    (36) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)
    -               reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)
    CONSTANTI       reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)
    CONSTANTF       reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)
    MAP             reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)
    REDUCE          reduce using rule 36 (assignment_operator -> MUL_ASSIGN .)


state 77

    (33) expression -> unary_expression assignment_operator . comparison_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 112
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    additive_expression            shift and go to state 43
    primary_expression             shift and go to state 54

state 78

    (35) assignment_operator -> = .

    INC_OP          reduce using rule 35 (assignment_operator -> = .)
    DEC_OP          reduce using rule 35 (assignment_operator -> = .)
    -               reduce using rule 35 (assignment_operator -> = .)
    IDENTIFIER      reduce using rule 35 (assignment_operator -> = .)
    CONSTANTI       reduce using rule 35 (assignment_operator -> = .)
    CONSTANTF       reduce using rule 35 (assignment_operator -> = .)
    (               reduce using rule 35 (assignment_operator -> = .)
    MAP             reduce using rule 35 (assignment_operator -> = .)
    REDUCE          reduce using rule 35 (assignment_operator -> = .)


state 79

    (37) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)
    -               reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)
    CONSTANTI       reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)
    CONSTANTF       reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)
    MAP             reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)
    REDUCE          reduce using rule 37 (assignment_operator -> ADD_ASSIGN .)


state 80

    (17) unary_expression -> DEC_OP unary_expression .

    =               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    *               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    /               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    <               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    >               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    +               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    -               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    )               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ;               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ]               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ,               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)


state 81

    (6) primary_expression -> REDUCE ( . postfix_expression , postfix_expression )
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    primary_expression             shift and go to state 54
    postfix_expression             shift and go to state 113

state 82

    (16) unary_expression -> INC_OP unary_expression .

    =               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    *               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    /               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    <               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    >               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    +               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    -               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    )               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ;               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ]               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ,               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)


state 83

    (72) iteration_statement -> WHILE ( . expression ) statement
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 114
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 84

    (32) comparison_expression -> additive_expression NE_OP . additive_expression
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 53
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 115
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 85

    (29) comparison_expression -> additive_expression LE_OP . additive_expression
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 53
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 116
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 86

    (24) additive_expression -> additive_expression + . multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 117
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 87

    (25) additive_expression -> additive_expression - . multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 118
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 88

    (30) comparison_expression -> additive_expression GE_OP . additive_expression
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 53
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 119
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 89

    (31) comparison_expression -> additive_expression EQ_OP . additive_expression
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 53
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 120
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 90

    (27) comparison_expression -> additive_expression < . additive_expression
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 53
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 121
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 91

    (28) comparison_expression -> additive_expression > . additive_expression
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 111
    multiplicative_expression      shift and go to state 53
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 122
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 92

    (4) primary_expression -> ( expression . )

    )               shift and go to state 123


state 93

    (12) postfix_expression -> postfix_expression [ . expression ]
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 124
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 94

    (18) unary_expression -> unary_operator unary_expression .

    =               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    MUL_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    ADD_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    SUB_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    *               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    /               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    <               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    >               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    LE_OP           reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    GE_OP           reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    EQ_OP           reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    NE_OP           reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    +               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    -               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    )               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    ;               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    ]               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)
    ,               reduce using rule 18 (unary_expression -> unary_operator unary_expression .)


state 95

    (71) selection_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    ;               shift and go to state 50
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 125
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 65
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 96

    (21) multiplicative_expression -> multiplicative_expression * . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 97

    (22) multiplicative_expression -> multiplicative_expression / . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 54
    unary_operator                 shift and go to state 51

state 98

    (69) selection_statement -> IF ( . expression ) statement
    (70) selection_statement -> IF ( . expression ) statement ELSE statement
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 128
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 99

    (5) primary_expression -> MAP ( . postfix_expression , postfix_expression )
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    primary_expression             shift and go to state 54
    postfix_expression             shift and go to state 129

state 100

    (7) primary_expression -> IDENTIFIER ( . )
    (8) primary_expression -> IDENTIFIER ( . argument_expression_list )
    (13) argument_expression_list -> . expression
    (14) argument_expression_list -> . argument_expression_list , expression
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    )               shift and go to state 130
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    argument_expression_list       shift and go to state 131
    additive_expression            shift and go to state 43
    expression                     shift and go to state 132
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 101

    (10) primary_expression -> IDENTIFIER DEC_OP .

    ,               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    [               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    =               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    MUL_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    ADD_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    SUB_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    *               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    /               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    <               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    >               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    LE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    GE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    EQ_OP           reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    NE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    +               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    -               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    )               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    ;               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)
    ]               reduce using rule 10 (primary_expression -> IDENTIFIER DEC_OP .)


state 102

    (9) primary_expression -> IDENTIFIER INC_OP .

    ,               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    [               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    =               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    MUL_ASSIGN      reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    ADD_ASSIGN      reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    SUB_ASSIGN      reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    *               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    /               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    <               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    >               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    LE_OP           reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    GE_OP           reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    EQ_OP           reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    NE_OP           reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    +               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    -               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    )               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    ;               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)
    ]               reduce using rule 9 (primary_expression -> IDENTIFIER INC_OP .)


state 103

    (64) declaration_list -> declaration_list declaration .

    EXTERN          reduce using rule 64 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 64 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 64 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 64 (declaration_list -> declaration_list declaration .)
    {               reduce using rule 64 (declaration_list -> declaration_list declaration .)
    ;               reduce using rule 64 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 64 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 64 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 64 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 64 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 64 (declaration_list -> declaration_list declaration .)
    INC_OP          reduce using rule 64 (declaration_list -> declaration_list declaration .)
    DEC_OP          reduce using rule 64 (declaration_list -> declaration_list declaration .)
    -               reduce using rule 64 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 64 (declaration_list -> declaration_list declaration .)
    CONSTANTI       reduce using rule 64 (declaration_list -> declaration_list declaration .)
    CONSTANTF       reduce using rule 64 (declaration_list -> declaration_list declaration .)
    (               reduce using rule 64 (declaration_list -> declaration_list declaration .)
    MAP             reduce using rule 64 (declaration_list -> declaration_list declaration .)
    REDUCE          reduce using rule 64 (declaration_list -> declaration_list declaration .)


state 104

    (62) compound_statement -> { declaration_list statement_list . }
    (66) statement_list -> statement_list . statement
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    }               shift and go to state 133
    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    selection_statement            shift and go to state 34
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    statement                      shift and go to state 105
    iteration_statement            shift and go to state 42
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 105

    (66) statement_list -> statement_list statement .

    }               reduce using rule 66 (statement_list -> statement_list statement .)
    {               reduce using rule 66 (statement_list -> statement_list statement .)
    ;               reduce using rule 66 (statement_list -> statement_list statement .)
    IF              reduce using rule 66 (statement_list -> statement_list statement .)
    FOR             reduce using rule 66 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 66 (statement_list -> statement_list statement .)
    DO              reduce using rule 66 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 66 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 66 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 66 (statement_list -> statement_list statement .)
    -               reduce using rule 66 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 66 (statement_list -> statement_list statement .)
    CONSTANTI       reduce using rule 66 (statement_list -> statement_list statement .)
    CONSTANTF       reduce using rule 66 (statement_list -> statement_list statement .)
    (               reduce using rule 66 (statement_list -> statement_list statement .)
    MAP             reduce using rule 66 (statement_list -> statement_list statement .)
    REDUCE          reduce using rule 66 (statement_list -> statement_list statement .)


state 106

    (61) compound_statement -> { statement_list } .

    }               reduce using rule 61 (compound_statement -> { statement_list } .)
    {               reduce using rule 61 (compound_statement -> { statement_list } .)
    ;               reduce using rule 61 (compound_statement -> { statement_list } .)
    IF              reduce using rule 61 (compound_statement -> { statement_list } .)
    FOR             reduce using rule 61 (compound_statement -> { statement_list } .)
    WHILE           reduce using rule 61 (compound_statement -> { statement_list } .)
    DO              reduce using rule 61 (compound_statement -> { statement_list } .)
    RETURN          reduce using rule 61 (compound_statement -> { statement_list } .)
    INC_OP          reduce using rule 61 (compound_statement -> { statement_list } .)
    DEC_OP          reduce using rule 61 (compound_statement -> { statement_list } .)
    -               reduce using rule 61 (compound_statement -> { statement_list } .)
    IDENTIFIER      reduce using rule 61 (compound_statement -> { statement_list } .)
    CONSTANTI       reduce using rule 61 (compound_statement -> { statement_list } .)
    CONSTANTF       reduce using rule 61 (compound_statement -> { statement_list } .)
    (               reduce using rule 61 (compound_statement -> { statement_list } .)
    MAP             reduce using rule 61 (compound_statement -> { statement_list } .)
    REDUCE          reduce using rule 61 (compound_statement -> { statement_list } .)
    ELSE            reduce using rule 61 (compound_statement -> { statement_list } .)
    EXTERN          reduce using rule 61 (compound_statement -> { statement_list } .)
    VOID            reduce using rule 61 (compound_statement -> { statement_list } .)
    INT             reduce using rule 61 (compound_statement -> { statement_list } .)
    FLOAT           reduce using rule 61 (compound_statement -> { statement_list } .)
    $end            reduce using rule 61 (compound_statement -> { statement_list } .)


state 107

    (68) expression_statement -> expression ; .

    }               reduce using rule 68 (expression_statement -> expression ; .)
    {               reduce using rule 68 (expression_statement -> expression ; .)
    ;               reduce using rule 68 (expression_statement -> expression ; .)
    IF              reduce using rule 68 (expression_statement -> expression ; .)
    FOR             reduce using rule 68 (expression_statement -> expression ; .)
    WHILE           reduce using rule 68 (expression_statement -> expression ; .)
    DO              reduce using rule 68 (expression_statement -> expression ; .)
    RETURN          reduce using rule 68 (expression_statement -> expression ; .)
    INC_OP          reduce using rule 68 (expression_statement -> expression ; .)
    DEC_OP          reduce using rule 68 (expression_statement -> expression ; .)
    -               reduce using rule 68 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 68 (expression_statement -> expression ; .)
    CONSTANTI       reduce using rule 68 (expression_statement -> expression ; .)
    CONSTANTF       reduce using rule 68 (expression_statement -> expression ; .)
    (               reduce using rule 68 (expression_statement -> expression ; .)
    MAP             reduce using rule 68 (expression_statement -> expression ; .)
    REDUCE          reduce using rule 68 (expression_statement -> expression ; .)
    ELSE            reduce using rule 68 (expression_statement -> expression ; .)


state 108

    (53) parameter_list -> parameter_list , parameter_declaration .

    )               reduce using rule 53 (parameter_list -> parameter_list , parameter_declaration .)
    ,               reduce using rule 53 (parameter_list -> parameter_list , parameter_declaration .)


state 109

    (73) iteration_statement -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 134


state 110

    (75) jump_statement -> RETURN expression ; .

    }               reduce using rule 75 (jump_statement -> RETURN expression ; .)
    {               reduce using rule 75 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 75 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 75 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 75 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 75 (jump_statement -> RETURN expression ; .)
    DO              reduce using rule 75 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 75 (jump_statement -> RETURN expression ; .)
    INC_OP          reduce using rule 75 (jump_statement -> RETURN expression ; .)
    DEC_OP          reduce using rule 75 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 75 (jump_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 75 (jump_statement -> RETURN expression ; .)
    CONSTANTI       reduce using rule 75 (jump_statement -> RETURN expression ; .)
    CONSTANTF       reduce using rule 75 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 75 (jump_statement -> RETURN expression ; .)
    MAP             reduce using rule 75 (jump_statement -> RETURN expression ; .)
    REDUCE          reduce using rule 75 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 75 (jump_statement -> RETURN expression ; .)


state 111

    (20) multiplicative_expression -> unary_expression .

    *               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    /               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    <               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    >               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    LE_OP           reduce using rule 20 (multiplicative_expression -> unary_expression .)
    GE_OP           reduce using rule 20 (multiplicative_expression -> unary_expression .)
    EQ_OP           reduce using rule 20 (multiplicative_expression -> unary_expression .)
    NE_OP           reduce using rule 20 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    ;               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    ]               reduce using rule 20 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 20 (multiplicative_expression -> unary_expression .)


state 112

    (33) expression -> unary_expression assignment_operator comparison_expression .

    ;               reduce using rule 33 (expression -> unary_expression assignment_operator comparison_expression .)
    )               reduce using rule 33 (expression -> unary_expression assignment_operator comparison_expression .)
    ]               reduce using rule 33 (expression -> unary_expression assignment_operator comparison_expression .)
    ,               reduce using rule 33 (expression -> unary_expression assignment_operator comparison_expression .)


state 113

    (6) primary_expression -> REDUCE ( postfix_expression . , postfix_expression )
    (12) postfix_expression -> postfix_expression . [ expression ]

    ,               shift and go to state 135
    [               shift and go to state 93


state 114

    (72) iteration_statement -> WHILE ( expression . ) statement

    )               shift and go to state 136


state 115

    (32) comparison_expression -> additive_expression NE_OP additive_expression .
    (24) additive_expression -> additive_expression . + multiplicative_expression
    (25) additive_expression -> additive_expression . - multiplicative_expression

    )               reduce using rule 32 (comparison_expression -> additive_expression NE_OP additive_expression .)
    ,               reduce using rule 32 (comparison_expression -> additive_expression NE_OP additive_expression .)
    ;               reduce using rule 32 (comparison_expression -> additive_expression NE_OP additive_expression .)
    ]               reduce using rule 32 (comparison_expression -> additive_expression NE_OP additive_expression .)
    +               shift and go to state 86
    -               shift and go to state 87


state 116

    (29) comparison_expression -> additive_expression LE_OP additive_expression .
    (24) additive_expression -> additive_expression . + multiplicative_expression
    (25) additive_expression -> additive_expression . - multiplicative_expression

    )               reduce using rule 29 (comparison_expression -> additive_expression LE_OP additive_expression .)
    ,               reduce using rule 29 (comparison_expression -> additive_expression LE_OP additive_expression .)
    ;               reduce using rule 29 (comparison_expression -> additive_expression LE_OP additive_expression .)
    ]               reduce using rule 29 (comparison_expression -> additive_expression LE_OP additive_expression .)
    +               shift and go to state 86
    -               shift and go to state 87


state 117

    (24) additive_expression -> additive_expression + multiplicative_expression .
    (21) multiplicative_expression -> multiplicative_expression . * unary_expression
    (22) multiplicative_expression -> multiplicative_expression . / unary_expression

    +               reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    LE_OP           reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_OP           reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_OP           reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    NE_OP           reduce using rule 24 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 96
    /               shift and go to state 97


state 118

    (25) additive_expression -> additive_expression - multiplicative_expression .
    (21) multiplicative_expression -> multiplicative_expression . * unary_expression
    (22) multiplicative_expression -> multiplicative_expression . / unary_expression

    +               reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    LE_OP           reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_OP           reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_OP           reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    NE_OP           reduce using rule 25 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 96
    /               shift and go to state 97


state 119

    (30) comparison_expression -> additive_expression GE_OP additive_expression .
    (24) additive_expression -> additive_expression . + multiplicative_expression
    (25) additive_expression -> additive_expression . - multiplicative_expression

    )               reduce using rule 30 (comparison_expression -> additive_expression GE_OP additive_expression .)
    ,               reduce using rule 30 (comparison_expression -> additive_expression GE_OP additive_expression .)
    ;               reduce using rule 30 (comparison_expression -> additive_expression GE_OP additive_expression .)
    ]               reduce using rule 30 (comparison_expression -> additive_expression GE_OP additive_expression .)
    +               shift and go to state 86
    -               shift and go to state 87


state 120

    (31) comparison_expression -> additive_expression EQ_OP additive_expression .
    (24) additive_expression -> additive_expression . + multiplicative_expression
    (25) additive_expression -> additive_expression . - multiplicative_expression

    )               reduce using rule 31 (comparison_expression -> additive_expression EQ_OP additive_expression .)
    ,               reduce using rule 31 (comparison_expression -> additive_expression EQ_OP additive_expression .)
    ;               reduce using rule 31 (comparison_expression -> additive_expression EQ_OP additive_expression .)
    ]               reduce using rule 31 (comparison_expression -> additive_expression EQ_OP additive_expression .)
    +               shift and go to state 86
    -               shift and go to state 87


state 121

    (27) comparison_expression -> additive_expression < additive_expression .
    (24) additive_expression -> additive_expression . + multiplicative_expression
    (25) additive_expression -> additive_expression . - multiplicative_expression

    )               reduce using rule 27 (comparison_expression -> additive_expression < additive_expression .)
    ,               reduce using rule 27 (comparison_expression -> additive_expression < additive_expression .)
    ;               reduce using rule 27 (comparison_expression -> additive_expression < additive_expression .)
    ]               reduce using rule 27 (comparison_expression -> additive_expression < additive_expression .)
    +               shift and go to state 86
    -               shift and go to state 87


state 122

    (28) comparison_expression -> additive_expression > additive_expression .
    (24) additive_expression -> additive_expression . + multiplicative_expression
    (25) additive_expression -> additive_expression . - multiplicative_expression

    )               reduce using rule 28 (comparison_expression -> additive_expression > additive_expression .)
    ,               reduce using rule 28 (comparison_expression -> additive_expression > additive_expression .)
    ;               reduce using rule 28 (comparison_expression -> additive_expression > additive_expression .)
    ]               reduce using rule 28 (comparison_expression -> additive_expression > additive_expression .)
    +               shift and go to state 86
    -               shift and go to state 87


state 123

    (4) primary_expression -> ( expression ) .

    ,               reduce using rule 4 (primary_expression -> ( expression ) .)
    [               reduce using rule 4 (primary_expression -> ( expression ) .)
    =               reduce using rule 4 (primary_expression -> ( expression ) .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    *               reduce using rule 4 (primary_expression -> ( expression ) .)
    /               reduce using rule 4 (primary_expression -> ( expression ) .)
    <               reduce using rule 4 (primary_expression -> ( expression ) .)
    >               reduce using rule 4 (primary_expression -> ( expression ) .)
    LE_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    GE_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    NE_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    +               reduce using rule 4 (primary_expression -> ( expression ) .)
    -               reduce using rule 4 (primary_expression -> ( expression ) .)
    )               reduce using rule 4 (primary_expression -> ( expression ) .)
    ;               reduce using rule 4 (primary_expression -> ( expression ) .)
    ]               reduce using rule 4 (primary_expression -> ( expression ) .)


state 124

    (12) postfix_expression -> postfix_expression [ expression . ]

    ]               shift and go to state 137


state 125

    (71) selection_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    ;               shift and go to state 50
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 138
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 65
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 126

    (21) multiplicative_expression -> multiplicative_expression * unary_expression .

    *               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    /               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    <               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    >               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LE_OP           reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GE_OP           reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    EQ_OP           reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    NE_OP           reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    +               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    -               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ;               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    )               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ]               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ,               reduce using rule 21 (multiplicative_expression -> multiplicative_expression * unary_expression .)


state 127

    (22) multiplicative_expression -> multiplicative_expression / unary_expression .

    *               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    /               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    <               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    >               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LE_OP           reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    GE_OP           reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    EQ_OP           reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    NE_OP           reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    +               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    -               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ;               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    )               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ]               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ,               reduce using rule 22 (multiplicative_expression -> multiplicative_expression / unary_expression .)


state 128

    (69) selection_statement -> IF ( expression . ) statement
    (70) selection_statement -> IF ( expression . ) statement ELSE statement

    )               shift and go to state 139


state 129

    (5) primary_expression -> MAP ( postfix_expression . , postfix_expression )
    (12) postfix_expression -> postfix_expression . [ expression ]

    ,               shift and go to state 140
    [               shift and go to state 93


state 130

    (7) primary_expression -> IDENTIFIER ( ) .

    ,               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    [               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    =               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    MUL_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    ADD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    SUB_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    *               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    /               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    <               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    >               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    LE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    GE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    EQ_OP           reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    NE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    +               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    -               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    )               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    ;               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)
    ]               reduce using rule 7 (primary_expression -> IDENTIFIER ( ) .)


state 131

    (8) primary_expression -> IDENTIFIER ( argument_expression_list . )
    (14) argument_expression_list -> argument_expression_list . , expression

    )               shift and go to state 141
    ,               shift and go to state 142


state 132

    (13) argument_expression_list -> expression .

    )               reduce using rule 13 (argument_expression_list -> expression .)
    ,               reduce using rule 13 (argument_expression_list -> expression .)


state 133

    (62) compound_statement -> { declaration_list statement_list } .

    }               reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    {               reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    ;               reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    IF              reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    FOR             reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    WHILE           reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    DO              reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    RETURN          reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    INC_OP          reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    DEC_OP          reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    -               reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    IDENTIFIER      reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    CONSTANTI       reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    CONSTANTF       reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    (               reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    MAP             reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    REDUCE          reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    ELSE            reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    EXTERN          reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    VOID            reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    INT             reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    FLOAT           reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)
    $end            reduce using rule 62 (compound_statement -> { declaration_list statement_list } .)


state 134

    (73) iteration_statement -> DO statement WHILE ( . expression ) ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 143
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 135

    (6) primary_expression -> REDUCE ( postfix_expression , . postfix_expression )
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    primary_expression             shift and go to state 54
    postfix_expression             shift and go to state 144

state 136

    (72) iteration_statement -> WHILE ( expression ) . statement
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    selection_statement            shift and go to state 34
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    statement                      shift and go to state 145
    iteration_statement            shift and go to state 42
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 137

    (12) postfix_expression -> postfix_expression [ expression ] .

    ,               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    [               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    LE_OP           reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    GE_OP           reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_OP           reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)
    NE_OP           reduce using rule 12 (postfix_expression -> postfix_expression [ expression ] .)


state 138

    (71) selection_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 146
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 139

    (69) selection_statement -> IF ( expression ) . statement
    (70) selection_statement -> IF ( expression ) . statement ELSE statement
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    selection_statement            shift and go to state 34
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    statement                      shift and go to state 147
    iteration_statement            shift and go to state 42
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 140

    (5) primary_expression -> MAP ( postfix_expression , . postfix_expression )
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP

    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    primary_expression             shift and go to state 54
    postfix_expression             shift and go to state 148

state 141

    (8) primary_expression -> IDENTIFIER ( argument_expression_list ) .

    ,               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    [               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    =               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    MUL_ASSIGN      reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    ADD_ASSIGN      reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    SUB_ASSIGN      reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    *               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    /               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    <               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    >               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    LE_OP           reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    GE_OP           reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    EQ_OP           reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    NE_OP           reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    +               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    -               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    )               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    ;               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)
    ]               reduce using rule 8 (primary_expression -> IDENTIFIER ( argument_expression_list ) .)


state 142

    (14) argument_expression_list -> argument_expression_list , . expression
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 53
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    expression                     shift and go to state 149
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 143

    (73) iteration_statement -> DO statement WHILE ( expression . ) ;

    )               shift and go to state 150


state 144

    (6) primary_expression -> REDUCE ( postfix_expression , postfix_expression . )
    (12) postfix_expression -> postfix_expression . [ expression ]

    )               shift and go to state 151
    [               shift and go to state 93


state 145

    (72) iteration_statement -> WHILE ( expression ) statement .

    WHILE           reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    }               reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    DO              reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    INC_OP          reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    DEC_OP          reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    CONSTANTI       reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    CONSTANTF       reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    MAP             reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    REDUCE          reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 72 (iteration_statement -> WHILE ( expression ) statement .)


state 146

    (71) selection_statement -> FOR ( expression_statement expression_statement expression . ) statement

    )               shift and go to state 152


state 147

    (69) selection_statement -> IF ( expression ) statement .
    (70) selection_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    DO              reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    INC_OP          reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    DEC_OP          reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    CONSTANTI       reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    CONSTANTF       reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    MAP             reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    REDUCE          reduce using rule 69 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 153

  ! ELSE            [ reduce using rule 69 (selection_statement -> IF ( expression ) statement .) ]


state 148

    (5) primary_expression -> MAP ( postfix_expression , postfix_expression . )
    (12) postfix_expression -> postfix_expression . [ expression ]

    )               shift and go to state 154
    [               shift and go to state 93


state 149

    (14) argument_expression_list -> argument_expression_list , expression .

    )               reduce using rule 14 (argument_expression_list -> argument_expression_list , expression .)
    ,               reduce using rule 14 (argument_expression_list -> argument_expression_list , expression .)


state 150

    (73) iteration_statement -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 155


state 151

    (6) primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .

    ,               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    [               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    =               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    MUL_ASSIGN      reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    ADD_ASSIGN      reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    SUB_ASSIGN      reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    *               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    /               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    <               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    >               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    LE_OP           reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    GE_OP           reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    EQ_OP           reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    NE_OP           reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    +               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    -               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    )               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    ;               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)
    ]               reduce using rule 6 (primary_expression -> REDUCE ( postfix_expression , postfix_expression ) .)


state 152

    (71) selection_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    selection_statement            shift and go to state 34
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    statement                      shift and go to state 156
    iteration_statement            shift and go to state 42
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 153

    (70) selection_statement -> IF ( expression ) statement ELSE . statement
    (55) statement -> . compound_statement
    (56) statement -> . expression_statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) compound_statement -> . { }
    (61) compound_statement -> . { statement_list }
    (62) compound_statement -> . { declaration_list statement_list }
    (67) expression_statement -> . ;
    (68) expression_statement -> . expression ;
    (69) selection_statement -> . IF ( expression ) statement
    (70) selection_statement -> . IF ( expression ) statement ELSE statement
    (71) selection_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (72) iteration_statement -> . WHILE ( expression ) statement
    (73) iteration_statement -> . DO statement WHILE ( expression ) ;
    (74) jump_statement -> . RETURN ;
    (75) jump_statement -> . RETURN expression ;
    (33) expression -> . unary_expression assignment_operator comparison_expression
    (34) expression -> . comparison_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator unary_expression
    (26) comparison_expression -> . additive_expression
    (27) comparison_expression -> . additive_expression < additive_expression
    (28) comparison_expression -> . additive_expression > additive_expression
    (29) comparison_expression -> . additive_expression LE_OP additive_expression
    (30) comparison_expression -> . additive_expression GE_OP additive_expression
    (31) comparison_expression -> . additive_expression EQ_OP additive_expression
    (32) comparison_expression -> . additive_expression NE_OP additive_expression
    (11) postfix_expression -> . primary_expression
    (12) postfix_expression -> . postfix_expression [ expression ]
    (19) unary_operator -> . -
    (23) additive_expression -> . multiplicative_expression
    (24) additive_expression -> . additive_expression + multiplicative_expression
    (25) additive_expression -> . additive_expression - multiplicative_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANTI
    (3) primary_expression -> . CONSTANTF
    (4) primary_expression -> . ( expression )
    (5) primary_expression -> . MAP ( postfix_expression , postfix_expression )
    (6) primary_expression -> . REDUCE ( postfix_expression , postfix_expression )
    (7) primary_expression -> . IDENTIFIER ( )
    (8) primary_expression -> . IDENTIFIER ( argument_expression_list )
    (9) primary_expression -> . IDENTIFIER INC_OP
    (10) primary_expression -> . IDENTIFIER DEC_OP
    (20) multiplicative_expression -> . unary_expression
    (21) multiplicative_expression -> . multiplicative_expression * unary_expression
    (22) multiplicative_expression -> . multiplicative_expression / unary_expression

    {               shift and go to state 20
    ;               shift and go to state 50
    IF              shift and go to state 56
    FOR             shift and go to state 52
    WHILE           shift and go to state 41
    DO              shift and go to state 33
    RETURN          shift and go to state 35
    INC_OP          shift and go to state 40
    DEC_OP          shift and go to state 37
    -               shift and go to state 47
    IDENTIFIER      shift and go to state 59
    CONSTANTI       shift and go to state 60
    CONSTANTF       shift and go to state 61
    (               shift and go to state 45
    MAP             shift and go to state 58
    REDUCE          shift and go to state 38

    expression_statement           shift and go to state 32
    jump_statement                 shift and go to state 57
    unary_expression               shift and go to state 36
    compound_statement             shift and go to state 44
    expression                     shift and go to state 65
    multiplicative_expression      shift and go to state 53
    selection_statement            shift and go to state 34
    comparison_expression          shift and go to state 39
    postfix_expression             shift and go to state 48
    additive_expression            shift and go to state 43
    statement                      shift and go to state 157
    iteration_statement            shift and go to state 42
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54

state 154

    (5) primary_expression -> MAP ( postfix_expression , postfix_expression ) .

    ,               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    [               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    =               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    MUL_ASSIGN      reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    ADD_ASSIGN      reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    SUB_ASSIGN      reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    *               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    /               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    <               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    >               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    LE_OP           reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    GE_OP           reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    EQ_OP           reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    NE_OP           reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    +               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    -               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    )               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    ;               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)
    ]               reduce using rule 5 (primary_expression -> MAP ( postfix_expression , postfix_expression ) .)


state 155

    (73) iteration_statement -> DO statement WHILE ( expression ) ; .

    WHILE           reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    }               reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ;               reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RETURN          reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INC_OP          reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEC_OP          reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    -               reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IDENTIFIER      reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONSTANTI       reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONSTANTF       reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    MAP             reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    REDUCE          reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 73 (iteration_statement -> DO statement WHILE ( expression ) ; .)


state 156

    (71) selection_statement -> FOR ( expression_statement expression_statement expression ) statement .

    }               reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ;               reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DO              reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RETURN          reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC_OP          reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEC_OP          reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONSTANTI       reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONSTANTF       reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    MAP             reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    REDUCE          reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 71 (selection_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 157

    (70) selection_statement -> IF ( expression ) statement ELSE statement .

    }               reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_OP          reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEC_OP          reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONSTANTI       reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONSTANTF       reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    MAP             reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    REDUCE          reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 70 (selection_statement -> IF ( expression ) statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 147 resolved as shift
